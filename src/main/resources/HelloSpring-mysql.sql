/*
Navicat MySQL Data Transfer

Source Server         : 本地MySQL
Source Server Version : 50717
Source Host           : localhost:3306
Source Database       : hellospring

Target Server Type    : MYSQL
Target Server Version : 50717
File Encoding         : 65001

Date: 2017-11-09 19:59:17
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for article
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article` (
  `ArticleID` int(11) NOT NULL AUTO_INCREMENT,
  `AuthorID` int(11) NOT NULL,
  `ArtTitle` varchar(255) CHARACTER SET utf8 NOT NULL,
  `Content` longtext CHARACTER SET utf8,
  `Summary` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `ThemeID` int(11) NOT NULL DEFAULT '5',
  `SavePath` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `HasAttachment` bit(1) DEFAULT b'0',
  `UpTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `PageView` int(255) DEFAULT '0',
  PRIMARY KEY (`ArticleID`),
  KEY `article_ibfk_1` (`ThemeID`),
  KEY `教程作者与用户ID` (`AuthorID`),
  CONSTRAINT `article_ibfk_1` FOREIGN KEY (`ThemeID`) REFERENCES `arttheme` (`ThemeID`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `教程作者与用户ID` FOREIGN KEY (`AuthorID`) REFERENCES `webusers` (`UID`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES ('19', '6', 'Spring简单实例', '<h4 style=\"margin-top: 20px; margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 16px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">1.1.1 创建一个新的Java工程，“HelloSpring”</h4><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><img src=\"file:///E:/ProgramCode/Spring/%E6%95%99%E7%A8%8B/img/hello_spring_wizard.jpg\" alt=\"spring入门\" style=\"margin: 0px; padding: 0px; max-width: 100%;\"><img src=\"/HelloSpring/upload/hello_spring_wizard.jpg\" style=\"width: 560px;\"></p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">点击菜单“File -&gt; New -&gt; Project”，并选择“Java Project”，创建成功后工程目录结构大致如下：</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><img src=\"file:///E:/ProgramCode/Spring/%E6%95%99%E7%A8%8B/img/hello_spring_dir.jpg\" alt=\"spring入门\" style=\"margin: 0px; padding: 0px; max-width: 100%;\"><img src=\"/HelloSpring/upload/hello_spring_dir.jpg\" style=\"width: 560px;\"></p><h4 style=\"margin-top: 20px; margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 16px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">1.1.2 在工程中添加所许的Spring库（Spring jar包）</h4><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">在“HelloSpring”工程上单击右键，然后点击菜单“Build Path -&gt; Configure Build Path”，将弹出以下对话框：</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><img src=\"file:///E:/ProgramCode/Spring/%E6%95%99%E7%A8%8B/img/java_build_path.jpg\" alt=\"spring入门\" style=\"margin: 0px; padding: 0px; max-width: 100%;\"><img src=\"/HelloSpring/upload/java_build_path.jpg\" style=\"width: 560px;\"></p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">然后通过“Add External JARs”按钮添加Spring框架所需要的jar包（上图显示的是添加完jar包之后的界面）。</p><h4 style=\"margin-top: 20px; margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 16px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">1.1.3 创建Java类</h4><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">（1）新建一个Java包，名为“com.tutorialspoint”。&nbsp;<br>（2）新建一个Java类，名为“HelloWorld”，其代码如下：</p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">package com.tutorialspoint;\n\npublic class HelloWorld {\n   private String message;\n\n   public void setMessage(String message){\n      this.message  = message;\n   }\n\n   public void getMessage(){\n      System.out.println(\"Your Message : \" + message);\n   }\n}\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">（3）再新建一个Java类，名为“MainApp”，其代码如下：</p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">package com.tutorialspoint;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n   public static void main(String[] args) {\n      ApplicationContext context = \n             new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n      HelloWorld obj = (HelloWorld) context.getBean(\"helloWorld\");\n\n      obj.getMessage();\n   }\n}\n</code></pre><h4 style=\"margin-top: 20px; margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 16px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">1.1.4 创建Spring配置文件</h4><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">在src目录下创建一个Spring配置文件，名称为“Beans.xml”，其内容如下：</p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\"&gt;\n\n   &lt;bean id=\"helloWorld\" class=\"com.tutorialspoint.HelloWorld\"&gt;\n       &lt;property name=\"message\" value=\"Hello World!\"/&gt;\n   &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre><h4 style=\"margin-top: 20px; margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 16px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">1.1.5 运行程序</h4><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">运行程序后，控制台上将得到以下结果：</p><blockquote style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px 15px; border-width: 0px 0px 0px 4px; border-left-color: rgb(221, 221, 221); color: rgb(119, 119, 119); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><p style=\"padding: 0px; border: 0px;\">Your Message : Hello World!&nbsp;</p><h3 style=\"margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 18px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">1.2 Spring程序说明</h3><h4 style=\"margin-top: 20px; margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 16px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">1.2.1 Spring程序结构</h4><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-size: 14px; line-height: 22.4px;\">Spring框架实际上是由一组jar包组成，所以利用Spring框架编程实际上就是使用Spring框架中所提供的类编写程序。所以使用Spring框架的程序一般由以下几个部分组成：</p><ul style=\"margin: 15px 0px; padding: 0px 0px 0px 30px; border: 0px; color: rgb(51, 51, 51); font-size: 14px; line-height: 22.4px;\"><li style=\"margin: 0px; padding: 0px; border: 0px;\">用户所编写的程序</li><li style=\"margin: 0px; padding: 0px; border: 0px;\">用户所编写Spring配置文件</li><li style=\"margin: 0px; padding: 0px; border: 0px;\">Spring框架（jar包）</li></ul><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-size: 14px; line-height: 22.4px;\">在上面的各个程序组成部分当中，我们只需要编写前面两项，而最后一项由Spring框架的开发者提供。</p><h4 style=\"margin-top: 20px; margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 16px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">1.2.2 Spring程序与普通Java程序的区别</h4><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-size: 14px; line-height: 22.4px;\">Spring程序与普通程序的一个显著的区别在于对象的创建方式。Spring程序中的对象是由Spring框架按照配置文件的要求进行创建，而不是像普通的Java程序一样，在程序中通过new关键字创建。例如上节中的MainApp的创建HelloWorld对象的代码如下：</p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">public static void main(String[] args) {\n    ApplicationContext context = \n         new ClassPathXmlApplicationContext(\"Beans.xml\");   \n    HelloWorld obj = (HelloWorld) context.getBean(\"helloWorld\");\n    obj.getMessage();\n}\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-size: 14px; line-height: 22.4px;\">上面的代码与以下代码等价：</p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">public static void main(String[] args) {\n    HelloWorld obj = new HelloWorld();\n    obj.getMessage();\n}</code></pre></blockquote>', '搭建第一个Spring项目', '1', null, '\0', '2017-05-12 20:45:49', '0');
INSERT INTO `article` VALUES ('20', '6', 'Spring核心概念', '<h4 style=\"margin-top: 20px; margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 16px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">1.3.1 依赖倒置</h4><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">从上一节的例子中可以看出，使用了Spring的程序明显比普通的程序要复杂。那么为什么Spring要采用如此繁琐的创建方式呢？</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">我们首先来看下面这个有关用户登录的例子：</p><blockquote style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px 15px; border-width: 0px 0px 0px 4px; border-left-color: rgb(221, 221, 221); color: rgb(119, 119, 119); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><p style=\"padding: 0px; border: 0px;\">User类是用户类，用于存储用户的账号与密码，现在假设用户登录有两种实现方式，LoginA类（登录账号与密码固定为\'admin\'与\'password\'）与LoginB类（登录账号与密码从文件\'login.txt\'中读取）分别实现了这两种登录方式，LoginApp类是主类。</p></blockquote><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">User类</strong></p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">package webadv.example.ch01;\n\npublic class User {\n\n    private String account;\n    private String password;\n\n    public String getAccount() {\n        return account;\n    }\n    public void setAccount(String account) {\n        this.account = account;\n    }\n    public String getPassword() {\n        return password;\n    }\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n}\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">LoginA类</strong></p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">package webadv.example.ch01;\n\npublic class LoginA {\n    public boolean checkLogin(User account){\n        return \"admin\".equals(account.getAccount()) &amp;&amp;   \n                \"password\".equals(account.getPassword());\n    }\n}\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">LoginB类</strong></p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">package webadv.example.ch01;\n\nimport java.io.*;\n\npublic class LoginB {\n    public boolean checkLogin(User user){\n        try (InputStream is = new FileInputStream(\"login.txt\")){\n            BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n            String account = reader.readLine();\n            String password = reader.readLine();\n            return (account.equals(user.getAccount()) &amp;&amp;   \n                    password.equals(user.getPassword()));           \n        } catch (FileNotFoundException e) {\n            return false;\n        } catch (IOException e) {\n            return false;\n        }\n    }\n}\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">LoginApp类</strong></p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">package webadv.example.ch01;\n\npublic class LoginApp {\n    public static void main(String args[]){\n        User user = new User();\n        user.setAccount(\"admin\");\n        user.setPassword(\"1111\");\n        LoginA l = new LoginA();\n        //LoginB l = new LoginB();\n        if (l.checkLogin(user))\n            System.out.println(\"Login succeeded ...\");\n        else\n            System.out.println(\"Login failed ...\");\n    }\n}\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">显然，在上面的代码中，LoginApp类必然会用到LoginA（或LoginB）类，我们通常称之为依赖关系，即LoginApp类依赖于LoginA（或LoginB）类。有时我们也说LoginApp类与LoginA（或LoginB）类之间有耦合。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">这样导致的结果就是，如果我们要改变登录方式则必须修改LoginApp类，如果用户还有其它登录方式（例如账号与密码存储在数据库中等等……）时，那么程序就要被做成许多版本，程序的维护与部署也会变得更加棘手。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">下面看看Spring中如何解决这个问题。</p><ol style=\"margin: 15px 0px; padding: 0px 0px 0px 30px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><li style=\"margin: 0px; padding: 0px; border: 0px;\">由于LoginA与LoginB的checkLogin方法都一致，所以可以从它们提取一个共同的接口ILogin；</li><li style=\"margin: 0px; padding: 0px; border: 0px;\">通过Spring的配置文件来实现LoginA或LoginB对象的创建。</li></ol><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">修改后的代码如下：</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">ILogin接口</strong></p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">package webadv.example.ch01;\n\npublic interface ILogin {\n    public boolean checkLogin(User user);\n}\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">LoginA类</strong></p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">...\npublic class LoginA implements ILogin{\n    ...\n｝\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">LoginB类</strong></p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">...\npublic class LoginB implements ILogin{\n    ...\n｝\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">LoginApp类</strong></p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">... \npublic class LoginApp {\n    public static void main(String args[]){\n        ...\n        ApplicationContext context = \n             new ClassPathXmlApplicationContext(\"Beans.xml\");\n        ILogin l = (ILogin) context.getBean(\"login\");       \n        ...\n    }\n}\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">程序修改后，通过增加LoginService接口，LoginApp类与LoginA（LoginB）类之间的依赖关系被解除了（通常也叫作解耦），而转变为LoginApp类与ILogin接口以及LoginA类与LoginService接口之间的依赖关系，这个过程就是我们接下来要谈到的依赖倒置。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">在面向对象设计过程中通常需要遵循7大原则：</p><ol style=\"margin: 15px 0px; padding: 0px 0px 0px 30px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><li style=\"margin: 0px; padding: 0px; border: 0px;\"><p style=\"margin-bottom: 15px; padding: 0px; border: 0px;\">单一职责原则（Single Responsibility Principle）<br>每一个类应该专注于做一件事情。</p></li><li style=\"margin: 0px; padding: 0px; border: 0px;\"><p style=\"margin-bottom: 15px; padding: 0px; border: 0px;\">里氏替换原则（Liskov Substitution Principle）<br>父类存在的地方，子类是可以替换的。</p></li><li style=\"margin: 0px; padding: 0px; border: 0px;\"><p style=\"margin-bottom: 15px; padding: 0px; border: 0px;\">依赖倒置原则（Dependence Inversion Principle）<br>实现尽量依赖抽象，不依赖具体实现。</p></li><li style=\"margin: 0px; padding: 0px; border: 0px;\"><p style=\"margin-bottom: 15px; padding: 0px; border: 0px;\">接口隔离原则（Interface Segregation Principle）<br>应当为客户端提供尽可能小的单独的接口，而不是提供大的总的接口。</p></li><li style=\"margin: 0px; padding: 0px; border: 0px;\"><p style=\"margin-bottom: 15px; padding: 0px; border: 0px;\">迪米特法则（Law Of Demeter）<br>又叫最少知识原则，一个软件实体应当尽可能少的与其他实体发生相互作用。</p></li><li style=\"margin: 0px; padding: 0px; border: 0px;\"><p style=\"margin-bottom: 15px; padding: 0px; border: 0px;\">开闭原则（Open Close Principle）<br>面向扩展开放，面向修改关闭。</p></li><li style=\"margin: 0px; padding: 0px; border: 0px;\"><p style=\"margin-bottom: 15px; padding: 0px; border: 0px;\">组合/聚合复用原则（Composite/Aggregate Reuse Principle CARP）&nbsp;<br>尽量使用合成/聚合达到复用，尽量少用继承。</p></li></ol><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">上一节的例子就符合依赖倒置原则，因为LoginA（LoginB）类是具体的checkLogin方法的实现类，所以如果LoginApp类依赖于LoginA（LoginB）类，我们就可以说LoginApp类依赖于具体实现。显然这不符合依赖倒置原则。而修改之后，LoginApp类依赖于ILogin接口，即LoginApp类依赖于抽象，从而实现了“依赖关系的转移”。</p><h4 style=\"margin-top: 20px; margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 16px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">1.3.2 控制反转</h4><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">Spring的核心概念便是IoC（Inversion of Control），即控制反转。具体来说，如果A依赖于B，其意义就是B拥有控制权。所以所谓控制反转，实际上就是控制权的转移，即前面所说的“依赖关系的转移”。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">需要注意的是，这里“反转”的含义并不是说将控制权由B转移到A，而是说将控制权从具体实现的一方转移到抽象的一方。具体来说，如果A与B都是具体实现，而且A、B之间的依赖关系是一种不良的依赖关系设计（这种依赖关系会造成程序的难于重用或维护），那么就应该考虑新增一个抽象C，并让A依赖于C且B实现C，从而使控制权从B（具体实现）转移到C（抽象）。</p><blockquote style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px 15px; border-width: 0px 0px 0px 4px; border-left-color: rgb(221, 221, 221); color: rgb(119, 119, 119); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><p style=\"padding: 0px; border: 0px;\">上一节的例子中，A、B、C分别代表谁？</p></blockquote><h4 style=\"margin-top: 20px; margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 16px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">1.3.3 依赖注入</h4><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">Martin Flower在文章“Inversion of Control Containers and the Dependency Injection pattern”中谈到，实现IoC有两种方式：Dependency Injection（依赖注入，简称为DI）与Service Locator，Spring采用的是前者。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">那么什么是依赖注入？</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">在前面所给的LoginApp类对User类、ILogin接口均有依赖，如果我们在类中仅保留对它们（User、ILogin）的引用，而将对象示例（User、ILogin的实例）的构建放至类的外部并提供注入方法，那么就实现了依赖注入。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">下面给出了修改后的代码。</p><blockquote style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px 15px; border-width: 0px 0px 0px 4px; border-left-color: rgb(221, 221, 221); color: rgb(119, 119, 119); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><p style=\"padding: 0px; border: 0px;\">为了便于说明，我们增加了一个LoginService类，该类承担了前面LoginApp类的大部分功能。</p></blockquote><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">LoginService</strong></p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">package webadv.example.ch01;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\n\npublic class LoginService {\n\n    private User user;\n    private ILogin l;\n\n    public LoginService(User user, ILogin l){\n        this.user=user;\n        this.l=l;\n    }\n\n    public void doLogin(){\n        if (l.checkLogin(user))\n            System.out.println(\"Login succeeded ...\");\n        else\n            System.out.println(\"Login failed ...\"); \n    }\n\n    public void read(){\n        try (BufferedReader reader = new BufferedReader(\n                new InputStreamReader(System.in))){\n            System.out.println(\"Please input account:\");\n            String account = reader.readLine();\n            System.out.println(\"Please input password:\");\n            String password = reader.readLine();\n            user.setAccount(account);\n            user.setPassword(password);\n\n        } catch (IOException e) {\n\n        }               \n    }\n\n}\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">LoginApp</strong></p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">package webadv.example.ch01;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class LoginApp {\n    public static void main(String[] args) {\n        ApplicationContext context = \n                 new ClassPathXmlApplicationContext(\"Beans.xml\");\n\n        LoginService app = (LoginService) context.getBean(\"loginService\");\n        app.read();\n        app.doLogin();\n    }\n}\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">Beans.xml</strong></p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\"&gt;\n\n   &lt;bean id=\"l\" class=\"webadv.example.ch01.LoginB\"/&gt; \n\n   &lt;bean id=\"user\" class=\"webadv.example.ch01.User\"/&gt;\n\n   &lt;bean id=\"loginService\" class=\"webadv.example.ch01.LoginService\"&gt;\n        &lt;constructor-arg ref=\"user\"/&gt;\n        &lt;constructor-arg ref=\"l\"/&gt;\n   &lt;/bean&gt;       \n\n&lt;/beans&gt;\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">LoginService通过构造方法实现了依赖注入。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">依赖注入的方式有三种，分别为“Interface Injection”、“Setter Injection”与“Constructor Injection”，通常也被称为\"Type 1 IoC\"、\"Type 2 IoC\"、\"Type 3 IoC\"。由于第一种方式对组件有侵入性，会降低组件的重用性，与Spring的理念不符，所以很少采用。Spring鼓励采用后两种方式，尤其鼓励采用第二种方式。</p><blockquote style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px 15px; border-width: 0px 0px 0px 4px; border-left-color: rgb(221, 221, 221); color: rgb(119, 119, 119); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><p style=\"padding: 0px; border: 0px;\">LoginService属于哪种方式？</p></blockquote><h4 style=\"margin-top: 20px; margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 16px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">1.3.3 Spring Bean 管理</h4><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">Spring的核心是一个实现了IoC的容器（Container），可以协助管理各个对象的生命周期以及对象之间的依赖关系。Spring可以方便对各类Bean进行配置与管理。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">上一节给出了“Constructor Injection”的例子，下面是一个“Setter Injection”的例子。</p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">&lt;bean id=\"user\" class=\"webadv.example.ch01.User\"&gt;  \n    &lt;property name=\"account\" value=\"admin\"/&gt;\n    &lt;property name=\"password\" value=\"111\"/&gt;\n&lt;/bean&gt;\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">关于Spring的Bean管理有很多内容，大家如果有兴趣，可以参考有关教程。</p><h3 style=\"margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 18px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">1.4 练习</h3><ol style=\"margin: 15px 0px; padding: 0px 0px 0px 30px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><li style=\"margin: 0px; padding: 0px; border: 0px;\">简述Spring的发展历史。</li><li style=\"margin: 0px; padding: 0px; border: 0px;\">Spring由哪些模块组成？它们分别有些什么作用？</li><li style=\"margin: 0px; padding: 0px; border: 0px;\">解释以下概念：IoC、DI。</li><li style=\"margin: 0px; padding: 0px; border: 0px;\">仿照本章中实例，使用Spring编写一个公交卡充值程序。</li><li style=\"margin: 0px; padding: 0px; border: 0px;\">你是如何理解Spring的？</li></ol>', '详细讲解Spring 中的核心概念，包括控制反转、依赖注入、容器技术等，为Spring入门打好基础', '1', null, '\0', '2017-05-12 20:49:30', '0');
INSERT INTO `article` VALUES ('21', '6', 'Spring MVC 基础', '<h4 style=\"margin-top: 20px; margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 16px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">2.1.1 MVC</h4><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">模型-视图-控制器（MVC）是一个众所周知的以设计UI程序为基础的设计模式。它将应用程序分解为模型、视图以及控制器，从而实现了业务逻辑与UI的解耦。通常，模型负责封装应用程序数据；视图完成对这些数据的展示，但不包含任何业务逻辑；控制器负责接收来自用户的请求，并调用后台服务来处理业务逻辑。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">MVC模式的核心思想是将业务逻辑从UI中分离出来，允许它们单独改变而不会相互影响。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><img src=\"file:///E:/ProgramCode/Spring/%E6%95%99%E7%A8%8B/img/mvc-architecture.gif\" alt=\"Spring MVC\" style=\"margin: 0px; padding: 0px; max-width: 100%;\"><img src=\"/HelloSpring/upload/mvc-architecture.gif\" style=\"width: 663px; height: 522.866px;\"></p><h3 style=\"margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 18px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">2.1.2 三层架构</h3><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">在Spring MVC应用程序中，模型通常由POJO对象组成，它在业务层中被处理，在持久层中被持久化。视图通常是用JSP标准标签库（JSTL）编写的JSP模板。控制器部分是由dispatcher servlet负责，在本教程中我们将会了解更多它的相关细节。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">一些开发人员认为业务层和DAO层类是MVC模型组件的一部分。我们对此持有不同的意见。我们不认为业务层及DAO层类为MVC框架的一部分。通常一个web应用是3层架构，即数据-业务-表示。MVC实际上是表示层的一部分。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><img src=\"file:///E:/ProgramCode/Spring/%E6%95%99%E7%A8%8B/img/Three-Tier.jpg\" alt=\"Spring MVC\" style=\"margin: 0px; padding: 0px; max-width: 100%;\"><img src=\"/HelloSpring/upload/Three-Tier.jpg\" style=\"width: 684px; height: 503.071px;\"></p><h3 style=\"margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 18px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">2.1.3 前端控制器</h3><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">在Web框架中，前端控制器模式是一个比较常见的模式。在该模式中所有的web请求都必须通过前端控制器（Dispatcher Servlet），并由前端控制器来决定该请求应当由哪个控制器（Controller）来处理。</p><p style=\"text-align: left; margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><img src=\"file:///E:/ProgramCode/Spring/%E6%95%99%E7%A8%8B/img/dispatcher-servlet.gif\" alt=\"Spring MVC\" style=\"margin: 0px; padding: 0px; max-width: 100%;\"><img src=\"/HelloSpring/upload/dispatcher-servlet.gif\" style=\"width: 770px; height: 473.562px;\"></p><h2 style=\"margin-right: 0px; margin-left: 0px; padding: 0px; border-width: 0px 0px 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 24px; color: rgb(0, 0, 0); font-family: Helvetica, arial, freesans, clean, sans-serif;\">2.2 Spring MVC 配置</h2><h3 style=\"margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 18px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">2.2.1 配置文件</h3><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">Spring MVC也采用了前端控制器模式。Spring MVC的jar包中已经提供了Dispatcher Servlet，所以我们无需自行编写前端控制器，而只需要在Java web部署描述文件（即web.xml文件）中配置一下就可以了。</p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">&lt;web-app id=\"WebApp_ID\" version=\"2.4\"\n    xmlns=\"http://java.sun.com/xml/ns/j2ee\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee \n    http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\"&gt;\n\n    &lt;display-name&gt;Spring Web MVC Hello World Application&lt;/display-name&gt;\n\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;spring&lt;/servlet-name&gt;\n            &lt;servlet-class&gt;\n                org.springframework.web.servlet.DispatcherServlet\n            &lt;/servlet-class&gt;\n        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n    &lt;/servlet&gt;\n\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;spring&lt;/servlet-name&gt;\n        &lt;url-pattern&gt;/&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;\n\n&lt;/web-app&gt;\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">在Spring MVC中，只有Dispatcher Servlet需要在web.xml中配置，而其它的配置均应在spring-servlet.xml（位于WEB-INF目录中，因为我们在web.xml中将Dispatcher Servlet的名称设为spring，所以该配置文件的名称为spring-servlet.xml）中完成。</p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans  xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:context=\"http://www.springframework.org/schema/context\"  \n    xmlns:mvc=\"http://www.springframework.org/schema/mvc\"  \n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd \n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context-3.0.xsd\n    http://www.springframework.org/schema/mvc\n    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd\"&gt;\n\n    &lt;!-- 自动扫描的包名，前端控制器将在指定的包中查找Controller --&gt;\n    &lt;context:component-scan base-package=\"webadv.example.ch02.controller\" /&gt;\n\n    &lt;!-- 支持MVC注解映射 --&gt;\n    &lt;mvc:annotation-driven /&gt;\n\n    &lt;!-- 设定视图解释类 --&gt;\n    &lt;bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt;\n        &lt;property name=\"prefix\" value=\"/WEB-INF/jsp/\"/&gt; &lt;!-- view的路径  --&gt;\n        &lt;property name=\"suffix\" value=\".jsp\"/&gt; &lt;!-- view的后缀  --&gt;        \n    &lt;/bean&gt;\n\n    &lt;!-- 访问以下静态资源时不需要经过前端控制器DispatcherServlet --&gt;     \n    &lt;mvc:resources mapping=\"/images/**\" location=\"/images/\" /&gt;  \n\n&lt;/beans&gt;\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">有的时候，配置文件会包含很多内容，这样会妨碍我们阅读配置文件，所以我们会希望用多个配置文件来进行配置。如果要在spring-servlet.xml中加入其它的配置文件，我们只需在它里面加入以下语句即可：</p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">&lt;beans ...&gt;\n    ...\n    &lt;import resource=\"beans.xml\"/&gt;\n    ...\n&lt;/beans&gt;\n</code></pre><h3 style=\"margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 18px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">2.2.2 Controller</h3><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">Spring MVC 支持用注解方式配置Controller。在这种方式下，控制器类必须标有@Controller注解。当有@Controller注解的控制器收到一个请求时，它会根据请求的url来寻找一个合适的handler方法来处理这个请求。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">控制器类使用@RequestMapping注解来完成url到handler方法的映射。</p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">package webadv.example.ch02.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class HelloController {\n\n    @RequestMapping(\"/hello\")\n    public String hello(){\n        return \"hello\";\n    }\n\n}\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">上面的HelloController标有@Controller注解，所以它是一个控制器类，它的每一个方法可以对应于一个url请求。在本例中，我们访问以下的url时，将调用该控制器类的hello方法。(labstudy为web工程名)</p><blockquote style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px 15px; border-width: 0px 0px 0px 4px; border-left-color: rgb(221, 221, 221); color: rgb(119, 119, 119); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><p style=\"padding: 0px; border: 0px;\">http://localhost:8080/labstudy/hello</p></blockquote><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">该方法的返回值为“hello”，其含义是跳转到名称为“hello”的视图。</p><h3 style=\"margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 18px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">2.2.3 View</h3><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">Spring MVC支持很多类型的视图，而jsp只是其中一种。在前面的spring-servlet.xml中，我们将jsp页面都配置到WEB-INF/jsp目录下面。下面是对应于“hello”视图的hello.jsp页面。</p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">&lt;%@ page language=\"java\" pageEncoding=\"utf-8\"%&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;Hello&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello,Spring!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>', '带领大家搭建第一个SpringMVC应用', '2', null, '\0', '2017-05-12 20:53:19', '0');
INSERT INTO `article` VALUES ('22', '6', 'Hibernate', '<h3 style=\"margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 18px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">3.3.1 ORM</h3><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">通常我们采用面向对象方法来设计应用系统，但在开发过程中我们经常会发现面向对象模型与关系型数据库之间存在着不一致、不匹配的现象。目前解决此类问题的常见方法就是采用ORM（Object-Relation-Mapping）框架。目前，常用的ORM框架有：</p><ul style=\"margin: 15px 0px; padding: 0px 0px 0px 30px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><li style=\"margin: 0px; padding: 0px; border: 0px;\">Enterprise JavaBeans Entity Beans</li><li style=\"margin: 0px; padding: 0px; border: 0px;\">Java Data Objects</li><li style=\"margin: 0px; padding: 0px; border: 0px;\">Castor</li><li style=\"margin: 0px; padding: 0px; border: 0px;\">TopLink</li><li style=\"margin: 0px; padding: 0px; border: 0px;\">Spring DAO</li><li style=\"margin: 0px; padding: 0px; border: 0px;\">Hibernate</li><li style=\"margin: 0px; padding: 0px; border: 0px;\">Mybatis</li><li style=\"margin: 0px; padding: 0px; border: 0px;\">...</li></ul><h3 style=\"margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 18px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">3.3.2 Hibernate简介</h3><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">Hibernate是目前使用得非常广泛的一种ORM框架，由于它解决的是数据的持久化问题，所以我们通常也称之为持久化框架，并使用它来开发系统中的持久化层。下图说明了Hibernate在应用系统中位置：</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><img src=\"/HelloSpring/upload/hibernate_position.jpg\" style=\"width: 751.261px; height: 222px;\"><img src=\"file:///E:/ProgramCode/Spring/%E6%95%99%E7%A8%8B/img/hibernate_position.jpg\" alt=\"Hibernate position\" style=\"margin: 0px; padding: 0px; max-width: 100%;\"></p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">Hibernate支持目前绝大多数主流的数据库，Hibernate框架的结构如下图所示</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><img src=\"file:///E:/ProgramCode/Spring/%E6%95%99%E7%A8%8B/img/hibernate_architecture.jpg\" alt=\"Hibernate architecture\" style=\"margin: 0px; padding: 0px; max-width: 100%;\"><img src=\"/HelloSpring/upload/hibernate_architecture.jpg\" style=\"width: 698px; height: 649.443px;\"></p><h3 style=\"margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 18px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">3.3.3 Hibernate配置</h3><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">与Spring框架类似，Hibernate也需要配置。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><img src=\"file:///E:/ProgramCode/Spring/%E6%95%99%E7%A8%8B/img/hibernate_configuration.jpg\" alt=\"Hibernate configuration\" style=\"margin: 0px; padding: 0px; max-width: 100%;\"><img src=\"/HelloSpring/upload/hibernate_configuration.jpg\" style=\"width: 717px; height: 582.952px;\"></p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">从上图可以看出，Hiberate的配置文件主要有两类，分别是Hiberate配置文件与Hibernate映射文件。下面我们以前面的student表为例讲解Hibernate的配置文件。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">hibernate配置</strong></p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE hibernate-configuration SYSTEM \n\"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\"&gt;\n\n&lt;hibernate-configuration&gt;\n   &lt;session-factory&gt;\n       &lt;property name=\"hibernate.dialect\"&gt;\n          org.hibernate.dialect.MySQLDialect\n       &lt;/property&gt;\n       &lt;property name=\"hibernate.connection.driver_class\"&gt;\n          com.mysql.jdbc.Driver\n       &lt;/property&gt;\n\n       &lt;!-- Assume labex is the database name --&gt;\n       &lt;property name=\"hibernate.connection.url\"&gt;\n          jdbc:mysql://localhost/labex\n       &lt;/property&gt;\n       &lt;property name=\"hibernate.connection.username\"&gt;\n          root\n       &lt;/property&gt;\n       &lt;property name=\"hibernate.connection.password\"&gt;\n          root\n       &lt;/property&gt;\n\n       &lt;!-- List of XML mapping files --&gt;\n       &lt;mapping resource=\"com/tutorialspoint/Student.hbm.xml\"/&gt;\n\n    &lt;/session-factory&gt;\n&lt;/hibernate-configuration&gt;\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">hibernate映射</strong></p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!DOCTYPE hibernate-mapping PUBLIC \n     \"-//Hibernate/Hibernate Mapping DTD//EN\"\n     \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\"&gt; \n\n&lt;hibernate-mapping&gt;\n    &lt;class name=\"com.tutorialspoint.Student\" table=\"t_student\"&gt;\n        &lt;meta attribute=\"class-description\"&gt;\n        This class contains the student detail. \n        &lt;/meta&gt;\n        &lt;id name=\"no\" column=\"student_no\" type=\"string\" /&gt;  \n        &lt;property name=\"name\" column=\"student_name\" type=\"string\"/&gt;\n        &lt;property name=\"clazz\" column=\"clazz_no\" type=\"string\"/&gt;    \n    &lt;/class&gt;\n&lt;/hibernate-mapping&gt;\n</code></pre><h3 style=\"margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 18px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">3.3.3 Hibernate使用</h3><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">完成配置之后，便可以使用Hibernate来访问数据库。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">HibernateApp</strong></p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">package com.tutorialspoint;\n\nimport java.util.Iterator;\nimport java.util.List;\n\nimport org.hibernate.HibernateException;\nimport org.hibernate.Session;\nimport org.hibernate.SessionFactory;\nimport org.hibernate.Transaction;\nimport org.hibernate.boot.registry.StandardServiceRegistry;\nimport org.hibernate.boot.registry.StandardServiceRegistryBuilder;\nimport org.hibernate.cfg.Configuration;\n\npublic class HibernateApp {\n    private static SessionFactory factory; \n    public static void main(String[] args) {\n        try{\n            Configuration configuration = new Configuration().configure(\"hibernate.cfg.xml\");\n            StandardServiceRegistryBuilder standardServiceRegistryBuilder = new StandardServiceRegistryBuilder().applySettings(configuration.getProperties());\n            StandardServiceRegistry standardServiceRegistry = standardServiceRegistryBuilder.build();\n            factory = configuration.buildSessionFactory(standardServiceRegistry);\n            listStudents();\n            factory.close();\n        }catch (Throwable ex) { \n            System.err.println(\"Failed to create sessionFactory object.\" + ex);\n            throw new ExceptionInInitializerError(ex); \n        }\n    }\n\n    /* Method to  READ all the students */\n       public static void listStudents( ){\n          Session session = factory.openSession();\n          Transaction tx = null;\n          try{\n             tx = session.beginTransaction();\n             List students = session.createQuery(\"FROM Student\").list(); \n\n             System.out.println(\"  Student No: \\t  Student Name: \\t  Clazz No: \");\n             System.out.println(\"  ----------- \\t  ------------- \\t  --------- \");\n             for (Iterator iterator = \n                               students.iterator(); iterator.hasNext();){\n                Student student = (Student) iterator.next(); \n                System.out.print(\"   \"+student.getNo()+\"  \\t\"); \n                System.out.print(\"   \"+student.getName()+\"    \\t\\t\"); \n                System.out.println(\"   \"+student.getClazz()+\"    \\t\"); \n             }\n             tx.commit();\n          }catch (HibernateException e) {\n             if (tx!=null) tx.rollback();\n             e.printStackTrace(); \n          }finally {\n             session.close(); \n          }\n       }\n\n}</code></pre>', '本篇介绍一个非常流行的ORM框架Hibernate的简单用法', '3', null, '\0', '2017-05-12 22:14:48', '0');
INSERT INTO `article` VALUES ('23', '6', 'Hibernate整合', '<p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">下面通过一个实例说明如何在Spring MVC中使用Hibernate。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">1 修改spring-servlet.xml配置文件</strong></p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">为了让Spring MVC中的组件能够访问Hibernate，我们必须将spring-servlet.xml配置文件做如下修改：</p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n    xmlns:context=\"http://www.springframework.org/schema/context\"\n    xmlns:mvc=\"http://www.springframework.org/schema/mvc\" \n    xmlns:p=\"http://www.springframework.org/schema/p\"\n    xmlns:tx=\"http://www.springframework.org/schema/tx\"\n\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd \n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context-3.0.xsd\n    http://www.springframework.org/schema/mvc\n    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd\n    http://www.springframework.org/schema/tx \n    http://www.springframework.org/schema/tx/spring-tx.xsd\"&gt;\n\n    &lt;context:annotation-config /&gt;\n    &lt;context:component-scan base-package=\"com.labex.*\" /&gt;\n\n    &lt;mvc:annotation-driven /&gt;\n    &lt;mvc:resources mapping=\"/images/**\" location=\"/images/\" /&gt;\n\n    &lt;bean   class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt;\n        &lt;property name=\"prefix\" value=\"/WEB-INF/jsp/\" /&gt;\n        &lt;property name=\"suffix\" value=\".jsp\" /&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"messageSource\"\n        class=\"org.springframework.context.support.ReloadableResourceBundleMessageSource\"&gt;\n        &lt;property name=\"basename\" value=\"/WEB-INF/messages\" /&gt;\n        &lt;property name=\"defaultEncoding\" value=\"utf-8\" /&gt;\n    &lt;/bean&gt;\n\n    &lt;!-- 配置jdbc属性文件 --&gt;\n    &lt;bean id=\"propertyConfigurer\"           class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"\n        p:location=\"/WEB-INF/jdbc.properties\" /&gt;\n\n    &lt;!-- 配置数据源，数据源的属性值来自jdbc属性文件 --&gt;\n    &lt;bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\"\n        destroy-method=\"close\" \n        p:driverClassName=\"${jdbc.driverClassName}\"\n        p:url=\"${jdbc.databaseurl}\" \n        p:username=\"${jdbc.username}\" \n        p:password=\"${jdbc.password}\" /&gt;\n\n    &lt;!-- 配置Hibernate的SessionFactory对象--&gt;\n    &lt;bean id=\"sessionFactory\"\n        class=\"org.springframework.orm.hibernate4.LocalSessionFactoryBean\"&gt;\n        &lt;property name=\"dataSource\" ref=\"dataSource\" /&gt;\n\n        &lt;property name=\"hibernateProperties\"&gt;\n            &lt;props&gt;\n                &lt;prop key=\"hibernate.dialect\"&gt;${jdbc.dialect}&lt;/prop&gt;\n                &lt;prop key=\"hibernate.show_sql\"&gt;true&lt;/prop&gt;\n                &lt;!-- &lt;prop key=\"hibernate.hbm2ddl.auto\"&gt;create&lt;/prop&gt; --&gt;\n            &lt;/props&gt;\n        &lt;/property&gt;\n\n        &lt;!-- 指定Hibernate配置文件的位置--&gt;\n        &lt;property name=\"configLocations\"&gt;  \n            &lt;list&gt;  \n                &lt;value&gt;  \n                    classpath*:hibernate.cfg.xml  \n                &lt;/value&gt;  \n            &lt;/list&gt;  \n        &lt;/property&gt; \n\n    &lt;/bean&gt;\n\n    &lt;!-- 配置Spring事务注解--&gt;\n    &lt;tx:annotation-driven /&gt;\n\n    &lt;!-- 配置Spring事务管理--&gt;\n    &lt;bean id=\"transactionManager\" class=\"org.springframework.orm.hibernate4.HibernateTransactionManager\"&gt;\n        &lt;property name=\"sessionFactory\" ref=\"sessionFactory\" /&gt;\n    &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">在上面的配置文件中，我们采用了jdbc属性文件，按照spring-servlet.xml的配置，jdbc属性文件应该位于WEB-INF目录下，并且名称为jdbc.properties，其内容如下：</p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">jdbc.driverClassName=com.mysql.jdbc.Driver\njdbc.dialect=org.hibernate.dialect.MySQLDialect\njdbc.databaseurl=jdbc:mysql://localhost:3306/labex\njdbc.username=root\njdbc.password=root\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">同时，spring-servlet.xml配置文件中又定义了数据源，sessionFactory以及事务管理bean。其中，Hibernate配置文件中指定了hibernate配置文件应当放置于classpath（即java src目录）下。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">2 Hibernate 配置</strong></p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">在本例当中，由于Hibernate mapping采用了注解配置方式，所以hibernate.cfg.xml文件比较简单，其内容如下所示：</p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">&lt;?xml version=\'1.0\' encoding=\'utf-8\'?&gt;\n&lt;!DOCTYPE hibernate-configuration PUBLIC  \n        \"-//Hibernate/Hibernate Configuration DTD 3.0//EN\"  \n        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\"&gt; \n\n&lt;hibernate-configuration&gt;\n    &lt;session-factory&gt;\n        &lt;mapping class=\"com.labex.model.Student\" /&gt;\n    &lt;/session-factory&gt;          \n&lt;/hibernate-configuration&gt;\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">由于采用了注解方式，所以不需要mapping xml配置文件，采用了注解的Student类如下：</p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">package com.labex.model;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"t_student\",schema = \"labex\")\npublic class Student {\n    @Id \n    @Column(name=\"student_no\")\n    private String no;\n    @Column(name=\"student_name\")\n    private String name;\n    @Column(name=\"clazz_no\")\n    private String clazzNo;\n\n    ... //get,set方法\n}\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">3 分层结构</strong></p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">按照分层结构，web应用可以分为表现层、业务层、数据层，而我们使用@Contoller注解来标注表现层中的控制器，用@Service来标注业务层中Service接口实现，用@Repository来标注DAO。其代码分别如下：</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">HomeController</strong></p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">package com.labex.controller;   \nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;  \nimport com.labex.model.Student;\nimport com.labex.service.LabService;\n\n@Controller \npublic class HomeController {\n\n    @Autowired\n    private LabService labService;\n\n    @RequestMapping(\"/\")\n    public String index(Model model){\n        Student student = labService.findStudentByNo(\"00201101\");\n        model.addAttribute(\"student\",student);\n        return \"index\";\n    }\n}\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">HomeConroller需要调用Service接口，所以注入了labService对象。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">LabServiceImpl</strong></p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">package com.labex.service;  \nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;  \nimport com.labex.dao.StudentDao;\nimport com.labex.model.Student;\n\n@Service\npublic class LabServiceImpl implements LabService{\n\n    @Autowired\n    private StudentDao studentDao;\n\n    @Override\n    public Student findStudentByNo(String no) {         \n        return studentDao.findByNo(no);\n    }\n\n    @Override\n    public void addStudent(Student student) {       \n        studentDao.add(student);\n    }\n\n}\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">LabServiceImpl需要调用Dao接口，所以注入了studentDao对象。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">StudentDaoImpl</strong></p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">package com.labex.dao;  \nimport org.hibernate.SessionFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Repository;   \nimport com.labex.model.Student; \n\n@Repository\npublic class StudentDaoImpl implements StudentDao {\n\n    @Autowired\n    protected SessionFactory sessionFactory;\n\n    @Override\n    public void add(Student student) {\n        sessionFactory.getCurrentSession().save(student);\n    }\n\n    @Override\n    public Student findByNo(String no) {\n        return (Student)sessionFactory.getCurrentSession()\n            .createQuery(\"from Student s where s.no = :no\")\n            .setParameter(\"no\", no)\n            .uniqueResult();\n    }   \n}\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">由于DAO中使用了Hibernate，所以StudentDaoImpl中注入了sessionFactory对象，并通过sessionFactory去访问数据库。</p><h3 style=\"margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 18px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">3.3.4 Hibernate校验</h3><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">在Hibernate当中，有支持校验的jar包（Hibernate-validator），可以在Spring MVC中使用该jar包对form表单中的输入信息进行校验。具体方法请参见相关资料及所给的示例代码。</p><h3 style=\"margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 18px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">3.4 练习</h3><ol style=\"margin: 15px 0px; padding: 0px 0px 0px 30px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><li style=\"margin: 0px; padding: 0px; border: 0px;\">解释DAO模式的工作原理。</li><li style=\"margin: 0px; padding: 0px; border: 0px;\">什么是JDBCTemplate。它有什么作用？</li><li style=\"margin: 0px; padding: 0px; border: 0px;\">简单介绍Hibernate框架的组成以及工作原理。</li><li style=\"margin: 0px; padding: 0px; border: 0px;\">仿照本章中实例，使用DAO模式编写一个读取数据库中习题表的小程序。</li></ol>', '本篇主要讲解如何将Hibernate于Spring框架进行整合使用', '3', null, '\0', '2017-05-12 22:15:57', '0');
INSERT INTO `article` VALUES ('24', '6', 'Spring AOP', '<h3 style=\"margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 18px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">5.1 AOP起源</h3><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">AOP技术的诞生并不算晚，早在1990年开始，来自Xerox Palo Alto Research Lab（即PARC）的研究人员就对面向对象思想的局限性进行了分析。他们研究出了一种新的编程思想，借助这一思想或许可以通过减少代码重复模块从而帮助开发人员提高工作效率。随着研究的逐渐深入，AOP也逐渐发展成一套完整的程序设计思想，各种应用AOP的技术也应运而生。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">AOP技术在Java平台下是最先得到应用的。就在PARC对于面向方面编程进行研究的同时，美国Northeastern University的博士生Cristina Lopes和其同事也开始了类似的思考。最终，美国国防先进技术研究计划署（Defense Advanced Research Projects Agency即DARPA）注意到了这项工作，并提供了科研经费，鼓励将二者的工作成果结合起来。他们通过定义一套Java语言的扩展系统，使开发者可以方便的进行面向方面的开发，这套扩展系统被称为AspectJ。之后，AspectJ在2002年被转让给Eclipse Foundation，从而成为在开源社区中AOP技术的先锋，也是目前最为流行的AOP工具。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">AspectWerkz则是基于Java的动态的、轻量级AOP框架。AspectWerkz仍然是开源社区中的产品，由BEA System提供赞助，开发者则是BEA的两名员工Jonas Bonér和Alexandre Vasseur。最近版本是AspectWerkz 2.0。2005年1月，AspectJ和AspectWerkz达成协议，同意将二者的成果综合到一起，取其精华创建一个单一的工具。他们合作的第一个发布版本为AspectJ 5，它扩展了AspectJ语言，以支持基于Annotation开发风格而又支持类似AspectJ代码风格。AspectJ 5也为Java 5的语言特性提供完全的AOP支持。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">在Java阵营中，商用软件制造商JBoss在其2004年推出的JBoss 4.0中，引入了AOP框架和组件。在JBoss 4.0中，用户可以在JBoss应用服务器外部单独使用JBoss AOP，该版本为JBoss AOP 1.0，是在2004年10月发布的。在2005年，JBoss AOP框架又发布了1.3.0版本，新版本对加载期织入（Weev）和切点（point cut）匹配的性能做了很大的优化，使应用程序的启动时间大大缩短。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">作为轻型的Framework，Spring在开发轻量级的J2EE时，应用是非常广泛的。它通过IoC模式（Inversion of Control，控制反转模式）来实现AOP，通常被称为Spring AOP。在2004年，被作为Spring框架的扩展而发布，目前版本已更新到1.1.3。Spring AOP作为一种非侵略性的，轻型的AOP框架，开发者无需使用预编译器或其他的元标签，在Java程序中应用AOP。目前，AOP的功能完全集成到了Spring事务管理、日志和其他各种特性的上下文中。</p><h3 style=\"margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 18px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">5.2 AOP概述</h3><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">AOP（Aspect-Oriented Programming，面向方面编程），可以说是OOP（Object-Oriented Programing，面向对象编程）的补充和完善。OOP引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。当我们需要为分散的对象引入公共行为的时候，OOP则显得无能为力。也就是说，OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系。例如日志功能。日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系。对于其他类型的代码，如安全性、异常处理和透明的持续性也是如此。这种散布在各处的无关的代码被称为横切（cross-cutting）代码，在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">而AOP技术则恰恰相反，它利用一种称为“横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其名为“Aspect”，即方面。所谓“方面”，简单地说，就是将那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。AOP代表的是一个横向的关系，如果说“对象”是一个空心的圆柱体，其中封装的是对象的属性和行为；那么面向方面编程的方法，就仿佛一把利刃，将这些空心圆柱体剖开，以获得其内部的消息。而剖开的切面，也就是所谓的“方面”了。然后它又以巧夺天功的妙手将这些剖开的切面复原，不留痕迹。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">使用“横切”技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处都基本相似。比如权限认证、日志、事务处理。Aop 的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。正如Avanade公司的高级方案构架师Adam Magee所说，<strong style=\"margin: 0px; padding: 0px; border: 0px;\">AOP的核心思想就是“将应用程序中的商业逻辑同对其提供支持的通用服务进行分离。”</strong></p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">实现AOP的技术，主要分为两大类：一是采用动态代理技术，利用截取消息的方式，对该消息进行装饰，以取代原有对象行为的执行；二是采用静态织入的方式，引入特定的语法创建“方面”，从而使得编译器可以在编译期间织入有关“方面”的代码。然而殊途同归，实现AOP的技术特性却是相同的，分别为：</p><ol style=\"margin: 15px 0px; padding: 0px 0px 0px 30px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><li style=\"margin: 0px; padding: 0px; border: 0px;\"><p style=\"margin-bottom: 15px; padding: 0px; border: 0px;\">join point（连接点）：是程序执行中的一个精确执行点，例如类中的一个方法。它是一个抽象的概念，在实现AOP时，并不需要去定义一个join point。</p></li><li style=\"margin: 0px; padding: 0px; border: 0px;\"><p style=\"margin-bottom: 15px; padding: 0px; border: 0px;\">point cut（切入点）：本质上是一个捕获连接点的结构。在AOP中，可以定义一个point cut，来捕获相关方法的调用。</p></li><li style=\"margin: 0px; padding: 0px; border: 0px;\"><p style=\"margin-bottom: 15px; padding: 0px; border: 0px;\">advice（通知）：是point cut的执行代码，是执行“方面”的具体逻辑。</p></li><li style=\"margin: 0px; padding: 0px; border: 0px;\"><p style=\"margin-bottom: 15px; padding: 0px; border: 0px;\">aspect（方面）：point cut和advice结合起来就是aspect，它类似于OOP中定义的一个类，但它代表的更多是对象间横向的关系。</p></li><li style=\"margin: 0px; padding: 0px; border: 0px;\"><p style=\"margin-bottom: 15px; padding: 0px; border: 0px;\">introduce（引入）：为对象引入附加的方法或属性，从而达到修改对象结构的目的。有的AOP工具又将其称为mixin。</p></li></ol><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">上述的技术特性组成了基本的AOP技术，大多数AOP工具均实现了这些技术。它们也可以是研究AOP技术的基本术语。</p><h3 style=\"margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 18px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">5.3 AOP原理</h3><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">一个关注点（concern）就是一个特定的目的，一块我们感兴趣的区域，一段我们需要的逻辑行为。从技术的角度来说，一个典型的软件系统包含一些核心的关注点和系统级的关注点。举个例子来说，一个信用卡处理系统的核心关注点是借贷/存入处理，而系统级的关注点则是日志、事务完整性、授权、安全及性能问题等，许多关注点——即横切关注点（crosscutting concerns）——会在多个模块中出现。如果使用现有的编程方法，横切关注点会横越多个模块，结果是使系统难以设计、理解、实现和演进。AOP能够比上述方法更好地分离系统关注点，从而提供模块化的横切关注点。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">例如一个复杂的系统，它由许多关注点组合实现，如业务逻辑、性能，数据存储、日志和调度信息、授权、安全、线程、错误检查等，还有开发过程中的关注点，如易懂、易维护、易追查、易扩展等，图2.1演示了由不同模块实现的一批关注点组成一个系统。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><img src=\"file:///E:/ProgramCode/Spring/%E6%95%99%E7%A8%8B/img/aop-concern01.gif\" alt=\"把模块作为一批关注点来实现\" style=\"margin: 0px; padding: 0px; max-width: 100%;\"><img src=\"/HelloSpring/upload/aop-concern01.gif\" style=\"width: 590px; height: 513.229px;\"></p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">通过对系统需求和实现的识别，我们可以将模块中的这些关注点分为：核心关注点和横切关注点。对于核心关注点而言，通常来说，实现这些关注点的模块是相互独立的，他们分别完成了系统需要的商业逻辑，这些逻辑与具体的业务需求有关。而对于日志、安全、持久化等关注点而言，他们却是商业逻辑模块所共同需要的，这些逻辑分布于核心关注点的各处。在AOP中，诸如这些模块，都称为横切关注点。应用AOP的横切技术，关键就是要实现对关注点的识别。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">如果将整个模块比喻为一个圆柱体，那么关注点识别过程可以用三棱镜法则来形容，穿越三棱镜的光束（指需求），照射到圆柱体各处，获得不同颜色的光束，最后识别出不同的关注点。如图2.2所示：</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><img src=\"file:///E:/ProgramCode/Spring/%E6%95%99%E7%A8%8B/img/aop-concern02.gif\" alt=\"关注点识别：三棱镜法则\" style=\"margin: 0px; padding: 0px; max-width: 100%;\"><img src=\"/HelloSpring/upload/aop-concern02.gif\" style=\"width: 677px; height: 312.332px;\"></p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">上图识别出来的关注点中，Business Logic属于核心关注点，它会调用到Security，Logging，Persistence等横切关注点。</p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">public class BusinessLogic\n{\n    public void SomeOperation()\n    {\n       //验证安全性；Securtity关注点；\n       //执行前记录日志；Logging关注点；\n\n       DoSomething();\n\n       //保存逻辑运算后的数据；Persistence关注点；\n       //执行结束记录日志；Logging关注点；\n    }\n}\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">AOP的目的，就是要将诸如Logging之类的横切关注点从BusinessLogic类中分离出来。利用AOP技术，可以对相关的横切关注点封装，形成单独的“aspect”。这就保证了横切关注点的复用。由于BusinessLogic类中不再包含横切关注点的逻辑代码，为达到调用横切关注点的目的，可以利用横切技术，截取BusinessLogic类中相关方法的消息，例如SomeOperation()方法，然后将这些“aspect”织入到该方法中。例如图2.3：</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><img src=\"file:///E:/ProgramCode/Spring/%E6%95%99%E7%A8%8B/img/aop-concern03.gif\" alt=\"将横切关注点织入到核心关注点中\" style=\"margin: 0px; padding: 0px; max-width: 100%;\"><img src=\"/HelloSpring/upload/aop-concern03.gif\" style=\"width: 670px; height: 353.962px;\"></p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">通过利用AOP技术，改变了整个系统的设计方式。在分析系统需求之初，利用AOP的思想，分离出核心关注点和横切关注点。在实现了诸如日志、事务管理、权限控制等横切关注点的通用逻辑后，开发人员就可以专注于核心关注点，将精力投入到解决企业的商业逻辑上来。同时，这些封装好了的横切关注点提供的功能，可以最大限度地复用于商业逻辑的各个部分，既不需要开发人员作特殊的编码，也不会因为修改横切关注点的功能而影响具体的业务功能。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">为了建立松散耦合的、可扩展的企业系统，AOP应用到的横切技术，通常分为两种类型：动态横切和静态横切。 Spring中主要采用动态横切。</p><h3 style=\"margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 18px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">5.4 Spring 拦截器</h3><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">在介绍AOP之前，我们先介绍Spring中的另一种类似的技术，即拦截器（Inceptor）。拦截器与Java EE技术中的过滤器（Filter）类似，它用于在控制器之前拦截用户的请求。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">例如：在通常情况下，我们希望用户在没有成功登录之前，无法进入除登录页面之外的其它页面。类似这样的功能我们就可以通过拦截器来实现。以下是其实现步骤。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">1 编写一个异常类LoginException</strong></p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">package labex.common.interceptor;   \npublic class LoginException extends Exception{}\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">2 编写一个拦截器LoginInceptor</strong></p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">package labex.common.interceptor;\n\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\npublic class LoginInterceptor extends HandlerInterceptorAdapter{\n\n    private List&lt;String&gt; excludedUrls;\n\n    public void setExcludedUrls(List&lt;String&gt; excludedUrls) {\n        this.excludedUrls = excludedUrls;\n    }\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n\n        //排除excludedUrls中的url\n        String requestUri = request.getRequestURI();\n        for (String url : excludedUrls) {\n            System.out.println(requestUri);\n            if (requestUri.indexOf(url)&gt;0) {\n                return true;\n            }\n        }\n\n        //验证用户是否已经登录\n        Object user = request.getSession().getAttribute(\"user\");\n        if (user == null)\n            throw new LoginException();\n        else\n            return true;\n    }   \n\n}\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">3 配置拦截器</strong></p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">&lt;mvc:interceptors&gt;\n    &lt;mvc:interceptor&gt;\n        &lt;mvc:mapping path=\"/t*\"/&gt;\n        &lt;bean id=\"loginInterceptor\" class=\"labex.common.interceptor.LoginInterceptor\"&gt;\n            &lt;property name=\"excludedUrls\"&gt;\n                &lt;list&gt;\n                    &lt;value&gt;/tindex&lt;/value&gt;\n                    &lt;value&gt;/tlogin&lt;/value&gt;\n                &lt;/list&gt;\n            &lt;/property&gt;\n        &lt;/bean&gt;\n    &lt;/mvc:interceptor&gt;\n&lt;/mvc:interceptors&gt;\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">4 配置错误页面</strong></p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">&lt;bean id=\"handlerExceptionResolver\" class=\"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver\"&gt;\n    &lt;property name=\"exceptionMappings\"&gt;\n        &lt;props&gt;\n            &lt;prop key=\"labex.common.interceptor.LoginException\"&gt;redirect:/tindex&lt;/prop&gt;\n        &lt;/props&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre><h3 style=\"margin-right: 0px; margin-left: 0px; padding: 0px; border: 0px; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 18px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif;\">5.5 Spring AOP</h3><p style=\"margin-top: 10px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\">与拦截器技术类似，Spring AOP 主要的作用也是拦截，只不过 Spring AOP的拦截控制粒度更细，它可以拦截类中的方法。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">1 编写Aspect</strong></p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">package labex.common.aop;\n\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\n\n@Aspect\npublic class LogAspect {        \n    @Around(\"execution(* labex.service.TeacherService.login(..))\")\n    public Object around(ProceedingJoinPoint  pjp) throws Throwable{\n        System.out.println(\"login excuted with(\"+pjp.getArgs()[0].toString()+\",\"+pjp.getArgs()[1].toString()+\")\");\n        return pjp.proceed();\n    }\n}\n</code></pre><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; border: 0px; color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22.4px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">2 配置AOP</strong></p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; line-height: 19px; border-radius: 3px; background-color: rgb(248, 248, 248);\"><code style=\"margin: 0px; border: none; font-size: 12px; font-family: Consolas, \'Liberation Mono\', Courier, monospace; white-space: pre; border-radius: 3px; background-image: initial; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\">xmlns:aop=\"http://www.springframework.org/schema/aop\" \n...\nhttp://www.springframework.org/schema/aop \nhttp://www.springframework.org/schema/aop/spring-aop-4.1.xsd\n...\n&lt;bean id=\"logAspect\" class=\"labex.common.aop.LogAspect\"/&gt;\n...\n&lt;aop:aspectj-autoproxy/&gt;</code></pre>', '介绍了Spring AOP的基本概念及面向切面编程的思想', '1', null, '\0', '2017-05-12 22:19:28', '0');
INSERT INTO `article` VALUES ('25', '6', 'Spring Web MVC优势', '<p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">1、清晰的角色划分：前端控制器（<code style=\"font-family: \'Courier New\', Courier, monospace; font-size: 1em; white-space: pre;\">DispatcherServlet</code>）、请求到处理器映射（HandlerMapping）、处理器适配器（HandlerAdapter）、视图解析器（ViewResolver）、处理器或页面控制器（Controller）、验证器（&nbsp;&nbsp; Validator）、命令对象（Command&nbsp; 请求参数绑定到的对象就叫命令对象）、表单对象（Form Object 提供给表单展示和提交到的对象就叫表单对象）。</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">2、分工明确，而且扩展点相当灵活，可以很容易扩展，虽然几乎不需要；</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">3、由于命令对象就是一个POJO，无需继承框架特定API，可以使用命令对象直接作为业务对象；</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">4、和Spring 其他框架无缝集成，是其它Web框架所不具备的；</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">5、可适配，通过HandlerAdapter可以支持任意的类作为处理器；</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">6、可定制性，HandlerMapping、ViewResolver等能够非常简单的定制；</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">7、功能强大的数据验证、格式化、绑定机制；</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">8、利用Spring提供的Mock对象能够非常简单的进行Web层单元测试；</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">9、本地化、主题的解析的支持，使我们更容易进行国际化和主题的切换。</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">10、强大的JSP标签库，使JSP编写更容易。</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">………………还有比如RESTful风格的支持、简单的文件上传、约定大于配置的契约式编程支持、基于注解的零配置支持等等。</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">&nbsp;</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">到此我们已经简单的了解了Spring Web MVC，接下来让我们来个实例来具体使用下这个框架。</p><h2 style=\"font-size: 1.5em; line-height: 1.5em; margin: 0px 0px 0.5em; padding: 0px; color: rgb(0, 0, 0); font-family: Helvetica, Tahoma, Arial, sans-serif;\">2．5、Hello World入门</h2><h3 style=\"font-size: 1.2em; line-height: 25.2px; margin: 0px 0px 0.5em; padding: 0px; color: rgb(0, 0, 0); font-family: Helvetica, Tahoma, Arial, sans-serif;\">2.5.1、准备开发环境和运行环境：</h3><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\"><strong>☆开发工具：eclipse</strong></p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\"><strong>☆运行环境：tomcat6.0.20</strong></p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\"><strong>☆工程：动态web</strong><strong>工程（springmvc-chapter2</strong><strong>）</strong></p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\"><strong>☆spring</strong><strong>框架下载：</strong></p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">spring-framework-3.1.1.RELEASE-with-docs.zip</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\"><strong>☆依赖jar</strong><strong>包：</strong></p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">1、&nbsp; Spring框架jar包：</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">为了简单，将spring-framework-3.1.1.RELEASE-with-docs.zip/dist/下的所有jar包拷贝到项目的WEB-INF/lib目录下；</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">2、&nbsp; Spring框架依赖的jar包：</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">需要添加Apache commons logging日志，此处使用的是commons.logging-1.1.1.jar；</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">需要添加jstl标签库支持，此处使用的是jstl-1.1.2.jar和standard-1.1.2.jar；</p><h3 style=\"font-size: 1.2em; line-height: 25.2px; margin: 0px 0px 0.5em; padding: 0px; color: rgb(0, 0, 0); font-family: Helvetica, Tahoma, Arial, sans-serif;\">2.5.2、前端控制器的配置</h3><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">在我们的web.xml中添加如下配置：</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">&nbsp;</p><div style=\"font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px; border: 1px solid rgb(170, 187, 204);\"><span class=\"bold\" style=\"font-weight: bold; font-size: medium; font-family: \'arial black\', \'avant garde\';\">java代码：</span><div class=\"dp-highlighter\" id=\"\" style=\"font-family: Monaco, \'DejaVu Sans Mono\', \'Bitstream Vera Sans Mono\', Consolas, \'Courier New\', monospace; font-size: 12px; width: 677.438px; overflow: auto; margin-left: 9px; padding: 1px; word-break: break-all; word-wrap: break-word; background-color: transparent;\"><div class=\"bar\"><div class=\"tools\" style=\"padding: 3px; margin: 0px; font-weight: bold;\">Java代码&nbsp;&nbsp;<a title=\"收藏这段代码\" style=\"color: rgb(16, 138, 198); text-decoration: underline;\"><img class=\"star\" src=\"http://jinnianshilongnian.iteye.com/images/icon_star.png\" alt=\"收藏代码\"></a></div></div><ol start=\"1\" class=\"dp-j\" style=\"font-size: 1em; line-height: 1.4em; margin-right: 0px; margin-bottom: 1px; margin-left: 0px; padding: 2px 0px; border: 1px solid rgb(209, 215, 220); color: rgb(43, 145, 175);\"><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&lt;servlet&gt;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;servlet-name&gt;chapter2&lt;/servlet-name&gt;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;servlet-<span class=\"keyword\" style=\"color: rgb(127, 0, 85); font-weight: bold;\">class</span>&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-<span class=\"keyword\" style=\"color: rgb(127, 0, 85); font-weight: bold;\">class</span>&gt;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;load-on-startup&gt;<span class=\"number\" style=\"color: rgb(192, 0, 0);\">1</span>&lt;/load-on-startup&gt;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&lt;/servlet&gt;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&lt;servlet-mapping&gt;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;servlet-name&gt;chapter2&lt;/servlet-name&gt;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;url-pattern&gt;/&lt;/url-pattern&gt;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&lt;/servlet-mapping&gt;&nbsp;&nbsp;</span></li></ol></div></div><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\"><strong>load-on-startup</strong><strong>：</strong>表示启动容器时初始化该Servlet；</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\"><strong>url-pattern</strong><strong>：</strong>表示哪些请求交给Spring Web MVC处理， “/” 是用来定义默认servlet映射的。也可以如“*.html”表示拦截所有以html为扩展名的请求。</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">&nbsp;</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">自此请求已交给Spring Web MVC框架处理，因此我们需要配置Spring的配置文件，默认DispatcherServlet会加载WEB-INF/[DispatcherServlet的Servlet名字]-servlet.xml配置文件。本示例为WEB-INF/ chapter2-servlet.xml。</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">&nbsp;</p><h3 style=\"font-size: 1.2em; line-height: 25.2px; margin: 0px 0px 0.5em; padding: 0px; color: rgb(0, 0, 0); font-family: Helvetica, Tahoma, Arial, sans-serif;\">2.5.3、在Spring配置文件中配置HandlerMapping、HandlerAdapter</h3><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">具体配置在WEB-INF/ chapter2-servlet.xml文件中：</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">&nbsp;</p><div style=\"font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px; border: 1px solid rgb(170, 187, 204);\"><span class=\"bold\" style=\"font-weight: bold; font-size: medium; font-family: \'arial black\', \'avant garde\';\">java代码：</span><div class=\"dp-highlighter\" id=\"\" style=\"font-family: Monaco, \'DejaVu Sans Mono\', \'Bitstream Vera Sans Mono\', Consolas, \'Courier New\', monospace; font-size: 12px; width: 677.438px; overflow: auto; margin-left: 9px; padding: 1px; word-break: break-all; word-wrap: break-word; background-color: transparent;\"><div class=\"bar\"><div class=\"tools\" style=\"padding: 3px; margin: 0px; font-weight: bold;\">Java代码&nbsp;&nbsp;<a title=\"收藏这段代码\" style=\"color: rgb(16, 138, 198); text-decoration: underline;\"><img class=\"star\" src=\"http://jinnianshilongnian.iteye.com/images/icon_star.png\" alt=\"收藏代码\"></a></div></div><ol start=\"1\" class=\"dp-j\" style=\"font-size: 1em; line-height: 1.4em; margin-right: 0px; margin-bottom: 1px; margin-left: 0px; padding: 2px 0px; border: 1px solid rgb(209, 215, 220); color: rgb(43, 145, 175);\"><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&lt;!--&nbsp;HandlerMapping&nbsp;--&gt;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&lt;bean&nbsp;<span class=\"keyword\" style=\"color: rgb(127, 0, 85); font-weight: bold;\">class</span>=<span class=\"string\" style=\"color: blue;\">\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\"</span>/&gt;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&nbsp;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&lt;!--&nbsp;HandlerAdapter&nbsp;--&gt;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&lt;bean&nbsp;<span class=\"keyword\" style=\"color: rgb(127, 0, 85); font-weight: bold;\">class</span>=<span class=\"string\" style=\"color: blue;\">\"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter\"</span>/&gt;&nbsp;&nbsp;</span></li></ol></div></div><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">&nbsp;</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">BeanNameUrlHandlerMapping：表示将请求的URL和Bean名字映射，如URL为 “上下文/hello”，则Spring配置文件必须有一个名字为“/hello”的Bean，上下文默认忽略。</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">SimpleControllerHandlerAdapter：表示所有实现了org.springframework.web.servlet.mvc.Controller接口的Bean可以作为Spring Web MVC中的处理器。如果需要其他类型的处理器可以通过实现HadlerAdapter来解决。</p><h3 style=\"font-size: 1.2em; line-height: 25.2px; margin: 0px 0px 0.5em; padding: 0px; color: rgb(0, 0, 0); font-family: Helvetica, Tahoma, Arial, sans-serif;\">2.5.4、在Spring配置文件中配置ViewResolver</h3><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">具体配置在WEB-INF/ chapter2-servlet.xml文件中：</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">&nbsp;</p><div style=\"font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px; border: 1px solid rgb(170, 187, 204);\"><span class=\"bold\" style=\"font-weight: bold; font-size: medium; font-family: \'arial black\', \'avant garde\';\">java代码：</span><div class=\"dp-highlighter\" id=\"\" style=\"font-family: Monaco, \'DejaVu Sans Mono\', \'Bitstream Vera Sans Mono\', Consolas, \'Courier New\', monospace; font-size: 12px; width: 677.438px; overflow: auto; margin-left: 9px; padding: 1px; word-break: break-all; word-wrap: break-word; background-color: transparent;\"><div class=\"bar\"><div class=\"tools\" style=\"padding: 3px; margin: 0px; font-weight: bold;\">Java代码&nbsp;&nbsp;<a title=\"收藏这段代码\" style=\"color: rgb(16, 138, 198); text-decoration: underline;\"><img class=\"star\" src=\"http://jinnianshilongnian.iteye.com/images/icon_star.png\" alt=\"收藏代码\"></a></div></div><ol start=\"1\" class=\"dp-j\" style=\"font-size: 1em; line-height: 1.4em; margin-right: 0px; margin-bottom: 1px; margin-left: 0px; padding: 2px 0px; border: 1px solid rgb(209, 215, 220); color: rgb(43, 145, 175);\"><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&lt;!--&nbsp;ViewResolver&nbsp;--&gt;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&lt;bean&nbsp;<span class=\"keyword\" style=\"color: rgb(127, 0, 85); font-weight: bold;\">class</span>=<span class=\"string\" style=\"color: blue;\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>&gt;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=<span class=\"string\" style=\"color: blue;\">\"viewClass\"</span>&nbsp;value=<span class=\"string\" style=\"color: blue;\">\"org.springframework.web.servlet.view.JstlView\"</span>/&gt;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=<span class=\"string\" style=\"color: blue;\">\"prefix\"</span>&nbsp;value=<span class=\"string\" style=\"color: blue;\">\"/WEB-INF/jsp/\"</span>/&gt;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=<span class=\"string\" style=\"color: blue;\">\"suffix\"</span>&nbsp;value=<span class=\"string\" style=\"color: blue;\">\".jsp\"</span>/&gt;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&lt;/bean&gt;&nbsp;&nbsp;</span></li></ol></div></div><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">&nbsp;</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">InternalResourceViewResolver：用于支持Servlet、JSP视图解析；</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">&nbsp;&nbsp;&nbsp; viewClass：JstlView表示JSP模板页面需要使用JSTL标签库，classpath中必须包含jstl的相关jar包；</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">&nbsp;&nbsp;&nbsp; prefix和suffix：查找视图页面的前缀和后缀（前缀[逻辑视图名]后缀），比如传进来的逻辑视图名为hello，则该该jsp视图页面应该存放在“WEB-INF/jsp/hello.jsp”；</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">&nbsp;</p><h3 style=\"font-size: 1.2em; line-height: 25.2px; margin: 0px 0px 0.5em; padding: 0px; color: rgb(0, 0, 0); font-family: Helvetica, Tahoma, Arial, sans-serif;\">2.5.5、开发处理器/页面控制器</h3><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">&nbsp;</p><div style=\"font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px; border: 1px solid rgb(170, 187, 204);\"><span class=\"bold\" style=\"font-weight: bold; font-size: medium; font-family: \'arial black\', \'avant garde\';\">java代码：</span><div class=\"dp-highlighter\" id=\"\" style=\"font-family: Monaco, \'DejaVu Sans Mono\', \'Bitstream Vera Sans Mono\', Consolas, \'Courier New\', monospace; font-size: 12px; width: 677.438px; overflow: auto; margin-left: 9px; padding: 1px; word-break: break-all; word-wrap: break-word; background-color: transparent;\"><div class=\"bar\"><div class=\"tools\" style=\"padding: 3px; margin: 0px; font-weight: bold;\">Java代码&nbsp;&nbsp;<a title=\"收藏这段代码\" style=\"color: rgb(16, 138, 198); text-decoration: underline;\"><img class=\"star\" src=\"http://jinnianshilongnian.iteye.com/images/icon_star.png\" alt=\"收藏代码\"></a></div></div><ol start=\"1\" class=\"dp-j\" style=\"font-size: 1em; line-height: 1.4em; margin-right: 0px; margin-bottom: 1px; margin-left: 0px; padding: 2px 0px; border: 1px solid rgb(209, 215, 220); color: rgb(43, 145, 175);\"><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\"><span class=\"keyword\" style=\"color: rgb(127, 0, 85); font-weight: bold;\">package</span>&nbsp;cn.javass.chapter2.web.controller;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\"><span class=\"keyword\" style=\"color: rgb(127, 0, 85); font-weight: bold;\">import</span>&nbsp;javax.servlet.http.HttpServletRequest;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\"><span class=\"keyword\" style=\"color: rgb(127, 0, 85); font-weight: bold;\">import</span>&nbsp;javax.servlet.http.HttpServletResponse;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\"><span class=\"keyword\" style=\"color: rgb(127, 0, 85); font-weight: bold;\">import</span>&nbsp;org.springframework.web.servlet.ModelAndView;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\"><span class=\"keyword\" style=\"color: rgb(127, 0, 85); font-weight: bold;\">import</span>&nbsp;org.springframework.web.servlet.mvc.Controller;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\"><span class=\"keyword\" style=\"color: rgb(127, 0, 85); font-weight: bold;\">public</span>&nbsp;<span class=\"keyword\" style=\"color: rgb(127, 0, 85); font-weight: bold;\">class</span>&nbsp;HelloWorldController&nbsp;<span class=\"keyword\" style=\"color: rgb(127, 0, 85); font-weight: bold;\">implements</span>&nbsp;Controller&nbsp;{&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"annotation\" style=\"color: rgb(100, 100, 100);\">@Override</span>&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"color: rgb(127, 0, 85); font-weight: bold;\">public</span>&nbsp;ModelAndView&nbsp;handleRequest(HttpServletRequest&nbsp;req,&nbsp;HttpServletResponse&nbsp;resp)&nbsp;<span class=\"keyword\" style=\"color: rgb(127, 0, 85); font-weight: bold;\">throws</span>&nbsp;Exception&nbsp;{&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"color: rgb(0, 130, 0); padding: 0px; margin: 0px; width: auto; border: 0px;\">//1、收集参数、验证参数</span>&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"color: rgb(0, 130, 0); padding: 0px; margin: 0px; width: auto; border: 0px;\">//2、绑定参数到命令对象</span>&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"color: rgb(0, 130, 0); padding: 0px; margin: 0px; width: auto; border: 0px;\">//3、将命令对象传入业务对象进行业务处理</span>&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"color: rgb(0, 130, 0); padding: 0px; margin: 0px; width: auto; border: 0px;\">//4、选择下一个页面</span>&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ModelAndView&nbsp;mv&nbsp;=&nbsp;<span class=\"keyword\" style=\"color: rgb(127, 0, 85); font-weight: bold;\">new</span>&nbsp;ModelAndView();&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"color: rgb(0, 130, 0); padding: 0px; margin: 0px; width: auto; border: 0px;\">//添加模型数据&nbsp;可以是任意的POJO对象</span>&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mv.addObject(<span class=\"string\" style=\"color: blue;\">\"message\"</span>,&nbsp;<span class=\"string\" style=\"color: blue;\">\"Hello&nbsp;World!\"</span>);&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"color: rgb(0, 130, 0); padding: 0px; margin: 0px; width: auto; border: 0px;\">//设置逻辑视图名，视图解析器会根据该名字解析到具体的视图页面</span>&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mv.setViewName(<span class=\"string\" style=\"color: blue;\">\"hello\"</span>);&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"color: rgb(127, 0, 85); font-weight: bold;\">return</span>&nbsp;mv;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">}&nbsp;&nbsp;</span></li></ol></div></div><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">&nbsp;</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">org.springframework.web.servlet.mvc.Controller：页面控制器/处理器必须实现Controller接口，注意别选错了；后边我们会学习其他的处理器实现方式；</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">public ModelAndView handleRequest(HttpServletRequest req, HttpServletResponse resp) ：功能处理方法，实现相应的功能处理，比如收集参数、验证参数、绑定参数到命令对象、将命令对象传入业务对象进行业务处理、最后返回ModelAndView对象；</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">ModelAndView：包含了视图要实现的模型数据和逻辑视图名；“mv.addObject(\"message\", \"Hello World!\");</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">”表示添加模型数据，此处可以是任意POJO对象；“mv.setViewName(\"hello\");”表示设置逻辑视图名为“hello”，视图解析器会将其解析为具体的视图，如前边的视图解析器InternalResourceVi。wResolver会将其解析为“WEB-INF/jsp/hello.jsp”。</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">&nbsp;</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">&nbsp;</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">我们需要将其添加到Spring配置文件(WEB-INF/chapter2-servlet.xml)，让其接受Spring IoC容器管理:</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">&nbsp;</p><div style=\"font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px; border: 1px solid rgb(170, 187, 204);\"><span class=\"bold\" style=\"font-weight: bold; font-size: medium; font-family: \'arial black\', \'avant garde\';\">java代码：</span><div class=\"dp-highlighter\" id=\"\" style=\"font-family: Monaco, \'DejaVu Sans Mono\', \'Bitstream Vera Sans Mono\', Consolas, \'Courier New\', monospace; font-size: 12px; width: 677.438px; overflow: auto; margin-left: 9px; padding: 1px; word-break: break-all; word-wrap: break-word; background-color: transparent;\"><div class=\"bar\"><div class=\"tools\" style=\"padding: 3px; margin: 0px; font-weight: bold;\">Java代码&nbsp;&nbsp;<a title=\"收藏这段代码\" style=\"color: rgb(16, 138, 198); text-decoration: underline;\"><img class=\"star\" src=\"http://jinnianshilongnian.iteye.com/images/icon_star.png\" alt=\"收藏代码\"></a></div></div><ol start=\"1\" class=\"dp-j\" style=\"font-size: 1em; line-height: 1.4em; margin-right: 0px; margin-bottom: 1px; margin-left: 0px; padding: 2px 0px; border: 1px solid rgb(209, 215, 220); color: rgb(43, 145, 175);\"><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&lt;!--&nbsp;处理器&nbsp;--&gt;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&lt;bean&nbsp;name=<span class=\"string\" style=\"color: blue;\">\"/hello\"</span>&nbsp;<span class=\"keyword\" style=\"color: rgb(127, 0, 85); font-weight: bold;\">class</span>=<span class=\"string\" style=\"color: blue;\">\"cn.javass.chapter2.web.controller.HelloWorldController\"</span>/&gt;&nbsp;&nbsp;</span></li></ol></div></div><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">&nbsp;</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">name=\"/hello\"：前边配置的BeanNameUrlHandlerMapping，表示如过请求的URL为 “上下文/hello”，则将会交给该Bean进行处理。&nbsp;</p><h3 style=\"font-size: 1.2em; line-height: 25.2px; margin: 0px 0px 0.5em; padding: 0px; color: rgb(0, 0, 0); font-family: Helvetica, Tahoma, Arial, sans-serif;\">2.5.6、开发视图页面</h3><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">创建 /WEB-INF/jsp/hello.jsp视图页面：</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">&nbsp;</p><div style=\"font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px; border: 1px solid rgb(170, 187, 204);\"><span class=\"bold\" style=\"font-weight: bold; font-size: medium; font-family: \'arial black\', \'avant garde\';\">java代码：</span><div class=\"dp-highlighter\" id=\"\" style=\"font-family: Monaco, \'DejaVu Sans Mono\', \'Bitstream Vera Sans Mono\', Consolas, \'Courier New\', monospace; font-size: 12px; width: 677.438px; overflow: auto; margin-left: 9px; padding: 1px; word-break: break-all; word-wrap: break-word; background-color: transparent;\"><div class=\"bar\"><div class=\"tools\" style=\"padding: 3px; margin: 0px; font-weight: bold;\">Java代码&nbsp;&nbsp;<a title=\"收藏这段代码\" style=\"color: rgb(16, 138, 198); text-decoration: underline;\"><img class=\"star\" src=\"http://jinnianshilongnian.iteye.com/images/icon_star.png\" alt=\"收藏代码\"></a></div></div><ol start=\"1\" class=\"dp-j\" style=\"font-size: 1em; line-height: 1.4em; margin-right: 0px; margin-bottom: 1px; margin-left: 0px; padding: 2px 0px; border: 1px solid rgb(209, 215, 220); color: rgb(43, 145, 175);\"><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&lt;%@&nbsp;page&nbsp;language=<span class=\"string\" style=\"color: blue;\">\"java\"</span>&nbsp;contentType=<span class=\"string\" style=\"color: blue;\">\"text/html;&nbsp;charset=UTF-8\"</span>&nbsp;pageEncoding=<span class=\"string\" style=\"color: blue;\">\"UTF-8\"</span>%&gt;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&lt;!DOCTYPE&nbsp;html&nbsp;PUBLIC&nbsp;<span class=\"string\" style=\"color: blue;\">\"-//W3C//DTD&nbsp;HTML&nbsp;4.01&nbsp;Transitional//EN\"</span>&nbsp;<span class=\"string\" style=\"color: blue;\">\"http://www.w3.org/TR/html4/loose.dtd\"</span>&gt;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&lt;html&gt;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&lt;head&gt;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&lt;meta&nbsp;http-equiv=<span class=\"string\" style=\"color: blue;\">\"Content-Type\"</span>&nbsp;content=<span class=\"string\" style=\"color: blue;\">\"text/html;&nbsp;charset=UTF-8\"</span>&gt;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&lt;title&gt;Hello&nbsp;World&lt;/title&gt;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&lt;/head&gt;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&lt;body&gt;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">${message}&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&lt;/body&gt;&nbsp;&nbsp;</span></li><li style=\"font-size: 1em; margin: 0px 0px 0px 38px; padding: 0px 0px 0px 10px; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(209, 215, 220); line-height: 18px; background-color: rgb(250, 250, 250);\"><span style=\"color: black;\">&lt;/html&gt;&nbsp;&nbsp;</span></li></ol></div></div><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">&nbsp;</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">${message}：表示显示由HelloWorldController处理器传过来的模型数据。</p><h3 style=\"font-size: 1.2em; line-height: 25.2px; margin: 0px 0px 0.5em; padding: 0px; color: rgb(0, 0, 0); font-family: Helvetica, Tahoma, Arial, sans-serif;\">2.5.6、启动服务器运行测试</h3><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">通过请求：<a href=\"http://localhost:9080/springmvc-chapter2/hello\" style=\"color: rgb(16, 138, 198); text-decoration: underline;\">http://localhost:9080/springmvc-chapter2/hello</a>，如果页面输出“Hello World! ”就表明我们成功了！</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">&nbsp;</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">&nbsp;</p><h3 style=\"font-size: 1.2em; line-height: 25.2px; margin: 0px 0px 0.5em; padding: 0px; color: rgb(0, 0, 0); font-family: Helvetica, Tahoma, Arial, sans-serif;\">2.5.7、运行流程分析</h3><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">如图2-3</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">&nbsp;<img alt=\"\" src=\"http://sishuok.com/forum/upload/2012/7/14/8b42eeaa9b2423b154944c651ed23667__3.JPG\" title=\"点击查看原始大小图片\" class=\"magplus\" width=\"700\" height=\"332\" style=\"cursor: url(&quot;/images/magplus.gif&quot;), pointer;\"></p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">图2-3</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">运行步骤：</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">1、&nbsp; 首先用户发送请求<a href=\"http://localhost:9080/springmvc-chapter2/hello%E2%80%94%E2%80%94%3eweb\" style=\"color: rgb(16, 138, 198); text-decoration: underline;\">http://localhost:9080/springmvc-chapter2/hello——&gt;web</a>容器，web容器根据“/hello”路径映射到DispatcherServlet（url-pattern为/）进行处理；</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">2、&nbsp; DispatcherServlet——&gt;BeanNameUrlHandlerMapping进行请求到处理的映射，BeanNameUrlHandlerMapping将“/hello”路径直接映射到名字为“/hello”的Bean进行处理，即HelloWorldController，BeanNameUrlHandlerMapping将其包装为HandlerExecutionChain（只包括HelloWorldController处理器，没有拦截器）；</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">3、&nbsp; DispatcherServlet——&gt; SimpleControllerHandlerAdapter，SimpleControllerHandlerAdapter将HandlerExecutionChain中的处理器（HelloWorldController）适配为SimpleControllerHandlerAdapter；</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">4、&nbsp; SimpleControllerHandlerAdapter——&gt; HelloWorldController处理器功能处理方法的调用，SimpleControllerHandlerAdapter将会调用处理器的handleRequest方法进行功能处理，该处理方法返回一个ModelAndView给DispatcherServlet；</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">5、&nbsp; hello（ModelAndView的逻辑视图名）——&gt;InternalResourceViewResolver， InternalResourceViewResolver使用JstlView，具体视图页面在/WEB-INF/jsp/hello.jsp；</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">6、&nbsp; JstlView（/WEB-INF/jsp/hello.jsp）——&gt;渲染，将在处理器传入的模型数据(message=HelloWorld！)在视图中展示出来；</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">7、&nbsp; 返回控制权给DispatcherServlet，由DispatcherServlet返回响应给用户，到此一个流程结束。</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">&nbsp;</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">到此HelloWorld就完成了，步骤是不是有点多？而且回忆下我们主要进行了如下配置：</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">&nbsp;</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">1、&nbsp; 前端控制器DispatcherServlet；</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">2、&nbsp; HandlerMapping</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">3、&nbsp; HandlerAdapter</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">4、&nbsp; ViewResolver</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">5、&nbsp; 处理器/页面控制器</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">6、&nbsp; 视图</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">&nbsp;</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">因此，接下来几章让我们详细看看这些配置，先从DispatcherServlet开始吧。</p><p style=\"margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 25.2px;\">&nbsp;</p>', 'Spring Web MVC优势', '2', null, '\0', '2017-05-12 22:21:35', '0');
INSERT INTO `article` VALUES ('27', '6', 'Spring MVC 表单处理例子', '<p style=\"margin-bottom: 5px; padding: 0px; word-wrap: break-word; line-height: 25.1304px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14.7826px;\">下面的例子说明了如何编写一个简单的基于 web 的应用程序，它利用了使用 Spring 的 Web MVC 框架的 HTML 表单。为了开始使用它，让我们在恰当的位置使用 Eclipse IDE，然后按照下面的步骤使用 Spring 的 Web 框架来开发一个动态的基于表单的 Web 应用程序：</p><table class=\"table table-bordered\" style=\"margin: 15px 0px; padding: 0px; width: 817.391px; table-layout: fixed; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14.7826px; line-height: 25.1304px; background-color: rgb(255, 255, 255);\"><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\"><th class=\"fivepct\" style=\"margin: 0px; padding: 2px 4px; border-color: rgb(204, 204, 204);\">步骤</th><th style=\"margin: 0px; padding: 2px 4px; border-color: rgb(204, 204, 204);\">描述</th></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 2px 4px; min-width: 40px; height: 30px; border-color: rgb(204, 204, 204);\">1</td><td style=\"margin: 0px; padding: 2px 4px; min-width: 40px; height: 30px; border-color: rgb(204, 204, 204);\">创建一个名称为&nbsp;<i style=\"margin: 0px; padding: 0px;\">HelloWeb</i>&nbsp;的<i style=\"margin: 0px; padding: 0px;\">动态 Web 项目</i>，并且在已创建的项目的&nbsp;<i style=\"margin: 0px; padding: 0px;\">src</i>&nbsp;文件夹中创建一个包&nbsp;<i style=\"margin: 0px; padding: 0px;\">com.tutorialspoint</i>。</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 2px 4px; min-width: 40px; height: 30px; border-color: rgb(204, 204, 204);\">2</td><td style=\"margin: 0px; padding: 2px 4px; min-width: 40px; height: 30px; border-color: rgb(204, 204, 204);\">将上面提到的 Spring 和其他库拖拽到文件夹<i style=\"margin: 0px; padding: 0px;\">WebContent/WEB-INF/lib</i>&nbsp;中。</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 2px 4px; min-width: 40px; height: 30px; border-color: rgb(204, 204, 204);\">3</td><td style=\"margin: 0px; padding: 2px 4px; min-width: 40px; height: 30px; border-color: rgb(204, 204, 204);\">在&nbsp;<i style=\"margin: 0px; padding: 0px;\">com.tutorialspoint</i>&nbsp;包下创建一个 Java 类&nbsp;<i style=\"margin: 0px; padding: 0px;\">Student</i>&nbsp;和<i style=\"margin: 0px; padding: 0px;\">StudentController</i>。</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 2px 4px; min-width: 40px; height: 30px; border-color: rgb(204, 204, 204);\">4</td><td style=\"margin: 0px; padding: 2px 4px; min-width: 40px; height: 30px; border-color: rgb(204, 204, 204);\">在&nbsp;<i style=\"margin: 0px; padding: 0px;\">WebContent/WEB-INF</i>&nbsp;文件夹下创建 Spring 的配置文件&nbsp;<i style=\"margin: 0px; padding: 0px;\">Web.xml</i>&nbsp;和&nbsp;<i style=\"margin: 0px; padding: 0px;\">HelloWeb-servlet.xml</i>。</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 2px 4px; min-width: 40px; height: 30px; border-color: rgb(204, 204, 204);\">5</td><td style=\"margin: 0px; padding: 2px 4px; min-width: 40px; height: 30px; border-color: rgb(204, 204, 204);\">在&nbsp;<i style=\"margin: 0px; padding: 0px;\">WebContent/WEB-INF</i>&nbsp;文件夹下创建名称为&nbsp;<i style=\"margin: 0px; padding: 0px;\">jsp</i>&nbsp;的子文件夹。在这个子文件夹下创建视图文件&nbsp;<i style=\"margin: 0px; padding: 0px;\">student.jsp</i>&nbsp;和<i style=\"margin: 0px; padding: 0px;\">result.jsp</i>。</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 2px 4px; min-width: 40px; height: 30px; border-color: rgb(204, 204, 204);\">6</td><td style=\"margin: 0px; padding: 2px 4px; min-width: 40px; height: 30px; border-color: rgb(204, 204, 204);\">最后一步是创建所有的源代码和配置文件的内容，并导出该应用程序，正如下面解释的一样。</td></tr></tbody></table><p style=\"margin-bottom: 5px; padding: 0px; word-wrap: break-word; line-height: 25.1304px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14.7826px;\">这里是&nbsp;<strong style=\"margin: 0px; padding: 0px;\">Student.java</strong>&nbsp;文件的内容：</p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 10px 5px; width: auto; max-width: 700px; line-height: 25.1304px; border-radius: 3px; font-size: 14.7826px; font-family: Consolas, \'Courier New\', Courier, monospace; border-color: rgb(221, 221, 221); color: rgb(0, 0, 0); white-space: pre-wrap !important; background: rgb(239, 239, 239);\"><code class=\"hljs java\" style=\"margin: 0px; display: block; overflow-x: auto; color: rgb(51, 51, 51); font-size: 13px; font-family: Consolas, \'Courier New\', Courier, monospace; background-image: none; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\"><span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">package</span> com.tutorialspoint;\n<span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">public</span> <span class=\"hljs-class\" style=\"margin: 0px; padding: 0px;\"><span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">class</span> <span class=\"hljs-title\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0); font-weight: bold;\">Student</span> </span>{\n   <span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">private</span> Integer age;\n   <span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">private</span> String name;\n   <span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">private</span> Integer id;\n   <span class=\"hljs-function\" style=\"margin: 0px; padding: 0px;\"><span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">public</span> <span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">void</span> <span class=\"hljs-title\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0); font-weight: bold;\">setAge</span><span class=\"hljs-params\" style=\"margin: 0px; padding: 0px;\">(Integer age)</span> </span>{\n      <span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">this</span>.age = age;\n   }\n   <span class=\"hljs-function\" style=\"margin: 0px; padding: 0px;\"><span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">public</span> Integer <span class=\"hljs-title\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0); font-weight: bold;\">getAge</span><span class=\"hljs-params\" style=\"margin: 0px; padding: 0px;\">()</span> </span>{\n      <span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">return</span> age;\n   }\n   <span class=\"hljs-function\" style=\"margin: 0px; padding: 0px;\"><span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">public</span> <span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">void</span> <span class=\"hljs-title\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0); font-weight: bold;\">setName</span><span class=\"hljs-params\" style=\"margin: 0px; padding: 0px;\">(String name)</span> </span>{\n      <span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">this</span>.name = name;\n   }\n   <span class=\"hljs-function\" style=\"margin: 0px; padding: 0px;\"><span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">public</span> String <span class=\"hljs-title\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0); font-weight: bold;\">getName</span><span class=\"hljs-params\" style=\"margin: 0px; padding: 0px;\">()</span> </span>{\n      <span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">return</span> name;\n   }\n   <span class=\"hljs-function\" style=\"margin: 0px; padding: 0px;\"><span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">public</span> <span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">void</span> <span class=\"hljs-title\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0); font-weight: bold;\">setId</span><span class=\"hljs-params\" style=\"margin: 0px; padding: 0px;\">(Integer id)</span> </span>{\n      <span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">this</span>.id = id;\n   }\n   <span class=\"hljs-function\" style=\"margin: 0px; padding: 0px;\"><span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">public</span> Integer <span class=\"hljs-title\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0); font-weight: bold;\">getId</span><span class=\"hljs-params\" style=\"margin: 0px; padding: 0px;\">()</span> </span>{\n      <span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">return</span> id;\n   }\n}</code></pre><p style=\"margin-bottom: 5px; padding: 0px; word-wrap: break-word; line-height: 25.1304px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14.7826px;\">下面是&nbsp;<strong style=\"margin: 0px; padding: 0px;\">StudentController.java</strong>&nbsp;文件的内容：</p><pre style=\"margin-top: 15px; margin-bottom: 15px; padding: 10px 5px; width: auto; max-width: 700px; line-height: 25.1304px; border-radius: 3px; font-size: 14.7826px; font-family: Consolas, \'Courier New\', Courier, monospace; border-color: rgb(221, 221, 221); color: rgb(0, 0, 0); white-space: pre-wrap !important; background: rgb(239, 239, 239);\"><code class=\"hljs css\" style=\"margin: 0px; display: block; overflow-x: auto; color: rgb(51, 51, 51); font-size: 13px; font-family: Consolas, \'Courier New\', Courier, monospace; background-image: none; background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial; background-position: initial; background-repeat: initial;\"><span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">package</span> <span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">com</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.tutorialspoint</span>;\n<span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">import</span> <span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">org</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.springframework</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.stereotype</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.Controller</span>;\n<span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">import</span> <span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">org</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.springframework</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.web</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.bind</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.annotation</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.ModelAttribute</span>;\n<span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">import</span> <span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">org</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.springframework</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.web</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.bind</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.annotation</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.RequestMapping</span>;\n<span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">import</span> <span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">org</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.springframework</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.web</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.bind</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.annotation</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.RequestMethod</span>;\n<span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">import</span> <span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">org</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.springframework</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.web</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.servlet</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.ModelAndView</span>;\n<span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">import</span> <span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">org</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.springframework</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.ui</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.ModelMap</span>;\n@<span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">Controller</span>\npublic class StudentController {\n   @<span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">RequestMapping</span>(<span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">value</span> = <span class=\"hljs-string\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">\"/student\"</span>, method = RequestMethod.GET)\n   public ModelAndView student() {\n      <span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">return</span> <span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">new</span> <span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">ModelAndView</span>(\"<span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">student</span>\", \"<span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">command</span>\", <span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">new</span> <span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">Student</span>());\n   }   \n   @<span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">RequestMapping</span>(<span class=\"hljs-keyword\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">value</span> = <span class=\"hljs-string\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">\"/addStudent\"</span>, method = RequestMethod.POST)\n   public String addStudent(@ModelAttribute(<span class=\"hljs-string\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">\"SpringWeb\"</span>)Student student, \n   ModelMap model) {\n      <span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">model</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.addAttribute</span>(\"<span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">name</span>\", <span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">student</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.getName</span>());\n      <span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">model</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.addAttribute</span>(\"<span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">age</span>\", <span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">student</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.getAge</span>());\n      <span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">model</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.addAttribute</span>(\"<span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">id</span>\", <span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">student</span><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px; color: rgb(136, 0, 0);\">.getId</span>());      \n      <span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">return</span> \"<span class=\"hljs-selector-tag\" style=\"margin: 0px; padding: 0px; font-weight: bold;\">result</span>\";\n   }\n}</code></pre><p style=\"margin-bottom: 5px; padding: 0px; word-wrap: break-word; line-height: 25.1304px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14.7826px;\">在这里，第一个 service 方法&nbsp;<strong style=\"margin: 0px; padding: 0px;\">student()</strong>，我们已经在名称为 “command” 的 ModelAndView 对象中传递一个空的<strong style=\"margin: 0px; padding: 0px;\">Student</strong>&nbsp;对象，因为 spring 框架需要一个名称的 “command” 的对象，如果你在 JSP 文件中使用 &lt;form:form&gt; 标签。所以，当&nbsp;<strong style=\"margin: 0px; padding: 0px;\">student()</strong>&nbsp;方法被调用时，它返回&nbsp;<strong style=\"margin: 0px; padding: 0px;\">student.jsp</strong>&nbsp;视图。</p><p style=\"margin-bottom: 5px; padding: 0px; word-wrap: break-word; line-height: 25.1304px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14.7826px;\">第二个 service 方法&nbsp;<strong style=\"margin: 0px; padding: 0px;\">addStudent()</strong>&nbsp;将调用&nbsp;<strong style=\"margin: 0px; padding: 0px;\">HelloWeb/addStudent</strong>&nbsp;URL 中的 POST 方法。你将根据提交的信息准备好你的模型对象。最后一个 “result” 视图会从 service 方法中返回，它将导致呈现 result.jsp。</p><p style=\"margin-bottom: 5px; padding: 0px; word-wrap: break-word; line-height: 25.1304px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14.7826px;\">下面是 Spring Web 配置文件&nbsp;<strong style=\"margin: 0px; padding: 0px;\">web.xml</strong>&nbsp;的内容</p><pre class=\"prettyprint notranslate\" style=\"margin-top: 15px; margin-bottom: 15px; padding: 10px 5px; width: auto; max-width: 700px; line-height: 25.1304px; border-radius: 3px; font-size: 14.7826px; font-family: Consolas, \'Courier New\', Courier, monospace; border-color: rgb(221, 221, 221); color: rgb(0, 0, 0); white-space: pre-wrap !important; background: rgb(239, 239, 239);\">&lt;web-app id=\"WebApp_ID\" version=\"2.4\"\n    xmlns=\"http://java.sun.com/xml/ns/j2ee\" \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee \n    http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\"&gt;\n\n    &lt;display-name&gt;Spring MVC Form Handling&lt;/display-name&gt;\n\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;HelloWeb&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;\n           org.springframework.web.servlet.DispatcherServlet\n        &lt;/servlet-class&gt;\n        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n    &lt;/servlet&gt;\n\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;HelloWeb&lt;/servlet-name&gt;\n        &lt;url-pattern&gt;/&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;\n\n&lt;/web-app&gt;\n</pre><p style=\"margin-bottom: 5px; padding: 0px; word-wrap: break-word; line-height: 25.1304px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14.7826px;\">下面是另一个 Spring Web 配置文件&nbsp;<strong style=\"margin: 0px; padding: 0px;\">HelloWeb-servlet.xml</strong>&nbsp;的内容</p><pre class=\"prettyprint notranslate\" style=\"margin-top: 15px; margin-bottom: 15px; padding: 10px 5px; width: auto; max-width: 700px; line-height: 25.1304px; border-radius: 3px; font-size: 14.7826px; font-family: Consolas, \'Courier New\', Courier, monospace; border-color: rgb(221, 221, 221); color: rgb(0, 0, 0); white-space: pre-wrap !important; background: rgb(239, 239, 239);\">&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n   xmlns:context=\"http://www.springframework.org/schema/context\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"\n   http://www.springframework.org/schema/beans     \n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n   http://www.springframework.org/schema/context \n   http://www.springframework.org/schema/context/spring-context-3.0.xsd\"&gt;\n\n   &lt;context:component-scan base-package=\"com.tutorialspoint\" /&gt;\n\n   &lt;bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt;\n      &lt;property name=\"prefix\" value=\"/WEB-INF/jsp/\" /&gt;\n      &lt;property name=\"suffix\" value=\".jsp\" /&gt;\n   &lt;/bean&gt;\n\n&lt;/beans&gt;\n</pre><p style=\"margin-bottom: 5px; padding: 0px; word-wrap: break-word; line-height: 25.1304px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14.7826px;\">下面是 Spring 视图文件&nbsp;<strong style=\"margin: 0px; padding: 0px;\">student.jsp</strong>&nbsp;的内容</p><pre class=\"prettyprint notranslate\" style=\"margin-top: 15px; margin-bottom: 15px; padding: 10px 5px; width: auto; max-width: 700px; line-height: 25.1304px; border-radius: 3px; font-size: 14.7826px; font-family: Consolas, \'Courier New\', Courier, monospace; border-color: rgb(221, 221, 221); color: rgb(0, 0, 0); white-space: pre-wrap !important; background: rgb(239, 239, 239);\">&lt;%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h2&gt;Student Information&lt;/h2&gt;\n&lt;form:form method=\"POST\" action=\"/HelloWeb/addStudent\"&gt;\n   &lt;table&gt;\n    &lt;tr&gt;\n        &lt;td&gt;&lt;form:label path=\"name\"&gt;Name&lt;/form:label&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;form:input path=\"name\" /&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;&lt;form:label path=\"age\"&gt;Age&lt;/form:label&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;form:input path=\"age\" /&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;&lt;form:label path=\"id\"&gt;id&lt;/form:label&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;form:input path=\"id\" /&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td colspan=\"2\"&gt;\n            &lt;input type=\"submit\" value=\"Submit\"/&gt;\n        &lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;  \n&lt;/form:form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre><p style=\"margin-bottom: 5px; padding: 0px; word-wrap: break-word; line-height: 25.1304px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14.7826px;\">下面是 Spring 视图文件&nbsp;<strong style=\"margin: 0px; padding: 0px;\">result.jsp</strong>&nbsp;的内容</p><pre class=\"prettyprint notranslate\" style=\"margin-top: 15px; margin-bottom: 15px; padding: 10px 5px; width: auto; max-width: 700px; line-height: 25.1304px; border-radius: 3px; font-size: 14.7826px; font-family: Consolas, \'Courier New\', Courier, monospace; border-color: rgb(221, 221, 221); color: rgb(0, 0, 0); white-space: pre-wrap !important; background: rgb(239, 239, 239);\">&lt;%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h2&gt;Submitted Student Information&lt;/h2&gt;\n   &lt;table&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Name&lt;/td&gt;\n        &lt;td&gt;${name}&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Age&lt;/td&gt;\n        &lt;td&gt;${age}&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;ID&lt;/td&gt;\n        &lt;td&gt;${id}&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;  \n&lt;/body&gt;\n&lt;/html&gt;\n</pre><p style=\"margin-bottom: 5px; padding: 0px; word-wrap: break-word; line-height: 25.1304px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14.7826px;\">最后，下面是包含在你的 web 应用程序中的 Spring 和其他库的列表。你仅仅需要将这些文件拖拽到<strong style=\"margin: 0px; padding: 0px;\">WebContent/WEB-INF/lib</strong>&nbsp;文件夹中。</p><ul style=\"margin-top: 10px; margin-right: 0px; margin-left: 0px; padding: 0px 0px 0px 30px; list-style-position: outside; list-style-image: none; line-height: 25.1304px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14.7826px;\"><li style=\"margin: 0px; padding: 0px; list-style-type: inherit;\"><p style=\"margin-bottom: 5px; padding: 0px; word-wrap: break-word; line-height: 1.7;\">commons-logging-x.y.z.jar</p></li><li style=\"margin: 0px; padding: 0px; list-style-type: inherit;\"><p style=\"margin-bottom: 5px; padding: 0px; word-wrap: break-word; line-height: 1.7;\">org.springframework.asm-x.y.z.jar</p></li><li style=\"margin: 0px; padding: 0px; list-style-type: inherit;\"><p style=\"margin-bottom: 5px; padding: 0px; word-wrap: break-word; line-height: 1.7;\">org.springframework.beans-x.y.z.jar</p></li><li style=\"margin: 0px; padding: 0px; list-style-type: inherit;\"><p style=\"margin-bottom: 5px; padding: 0px; word-wrap: break-word; line-height: 1.7;\">org.springframework.context-x.y.z.jar</p></li><li style=\"margin: 0px; padding: 0px; list-style-type: inherit;\"><p style=\"margin-bottom: 5px; padding: 0px; word-wrap: break-word; line-height: 1.7;\">org.springframework.core-x.y.z.jar</p></li><li style=\"margin: 0px; padding: 0px; list-style-type: inherit;\"><p style=\"margin-bottom: 5px; padding: 0px; word-wrap: break-word; line-height: 1.7;\">org.springframework.expression-x.y.z.jar</p></li><li style=\"margin: 0px; padding: 0px; list-style-type: inherit;\"><p style=\"margin-bottom: 5px; padding: 0px; word-wrap: break-word; line-height: 1.7;\">org.springframework.web.servlet-x.y.z.jar</p></li><li style=\"margin: 0px; padding: 0px; list-style-type: inherit;\"><p style=\"margin-bottom: 5px; padding: 0px; word-wrap: break-word; line-height: 1.7;\">org.springframework.web-x.y.z.jar</p></li><li style=\"margin: 0px; padding: 0px; list-style-type: inherit;\">spring-web.jar</li></ul><p style=\"margin-bottom: 5px; padding: 0px; word-wrap: break-word; line-height: 25.1304px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14.7826px;\">一旦你完成了创建源代码和配置文件后，导出你的应用程序。右键单击你的应用程序，并且使用&nbsp;<strong style=\"margin: 0px; padding: 0px;\">Export &gt; WAR File</strong>&nbsp;选项，并且在 Tomcat 的&nbsp;<em style=\"margin: 0px; padding: 0px;\">webapps</em>&nbsp;文件夹中保存你的&nbsp;<strong style=\"margin: 0px; padding: 0px;\">HelloWeb.war</strong>&nbsp;文件。</p><p style=\"margin-bottom: 5px; padding: 0px; word-wrap: break-word; line-height: 25.1304px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14.7826px;\">现在启动你的 Tomcat 服务器，并且确保你能够使用标准的浏览器访问 webapps 文件夹中的其他 web 页面。现在尝试访问该 URL&nbsp;<strong style=\"margin: 0px; padding: 0px;\"><a rel=\"nofollow\" href=\"http://localhost:8080/SpringWeb/student\" style=\"margin: 0px; padding: 0px; color: rgb(144, 11, 9); text-decoration: underline; word-break: break-all;\">http://localhost:8080/SpringWeb/student</a></strong>。如果你的 Spring Web 应用程序一切都正常，你应该看到下面的结果：</p><p style=\"margin-bottom: 5px; padding: 0px; word-wrap: break-word; line-height: 25.1304px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14.7826px;\"><img src=\"http://img.w3cschool.cn/attachments/image/wk/wkspring/1.2.png\" alt=\"\" style=\"margin: 0px; padding: 0px; max-width: 100%;\"></p><p style=\"margin-bottom: 5px; padding: 0px; word-wrap: break-word; line-height: 25.1304px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14.7826px;\">在提交必需的信息之后，单击提交按钮来提交这个表单。如果你的 Spring Web 应用程序一切都正常，你应该看到下面的结果：</p><p style=\"margin-bottom: 5px; padding: 0px; word-wrap: break-word; line-height: 25.1304px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14.7826px;\"><img src=\"http://img.w3cschool.cn/attachments/image/wk/wkspring/1.3.png\" alt=\"\" style=\"margin: 0px; padding: 0px; max-width: 100%;\"></p>', 'Spring MVC 表单处理例子', '2', null, '\0', '2017-05-12 22:25:01', '0');
INSERT INTO `article` VALUES ('28', '1', 'spring boot教程', '<div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\"><span style=\"font-size: 18pt;\">一、内置Servlet Container：</span></div><blockquote style=\"background-image: none; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; border-width: 2px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-color: rgb(239, 239, 239); border-image: initial; padding: 5px 10px; margin-top: 10px; margin-bottom: 10px; font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\"><table style=\"border: 0.5pt solid silver; word-break: break-word; width: 487px;\"><colgroup><col class=\"col_1\"><col class=\"col_2\"><col class=\"col_3\"></colgroup><thead><tr><th align=\"left\" valign=\"top\" width=\"139\" style=\"border-width: 1px 0.5pt 0.5pt 1px; border-style: solid; border-top-color: silver; border-right-color: initial; border-bottom-color: initial; border-left-color: silver; border-image: initial; border-collapse: collapse; padding: 3px;\">Name</th><th align=\"left\" valign=\"top\" width=\"191\" style=\"border-width: 1px 0.5pt 0.5pt 1px; border-style: solid; border-top-color: silver; border-right-color: initial; border-bottom-color: initial; border-left-color: silver; border-image: initial; border-collapse: collapse; padding: 3px;\">Servlet Version</th><th align=\"left\" valign=\"top\" width=\"155\" style=\"border-width: 1px 1px 0.5pt; border-style: solid; border-top-color: silver; border-right-color: silver; border-bottom-color: initial; border-left-color: silver; border-image: initial; border-collapse: collapse; padding: 3px;\">Java Version</th></tr></thead><tbody><tr><td align=\"left\" valign=\"top\" width=\"139\" style=\"border-width: 1px 0.5pt 0.5pt 1px; border-style: solid; border-top-color: silver; border-right-color: initial; border-bottom-color: initial; border-left-color: silver; border-image: initial; border-collapse: collapse; padding: 3px;\"><p style=\"margin: 10px auto;\">Tomcat 8</p></td><td align=\"left\" valign=\"top\" width=\"191\" style=\"border-width: 1px 0.5pt 0.5pt 1px; border-style: solid; border-top-color: silver; border-right-color: initial; border-bottom-color: initial; border-left-color: silver; border-image: initial; border-collapse: collapse; padding: 3px;\"><p style=\"margin: 10px auto;\">3.1</p></td><td align=\"left\" valign=\"top\" width=\"155\" style=\"border-width: 1px 1px 0.5pt; border-style: solid; border-top-color: silver; border-right-color: silver; border-bottom-color: initial; border-left-color: silver; border-image: initial; border-collapse: collapse; padding: 3px;\"><p style=\"margin: 10px auto;\">Java 7+</p></td></tr><tr><td align=\"left\" valign=\"top\" width=\"139\" style=\"border-width: 1px 0.5pt 0.5pt 1px; border-style: solid; border-top-color: silver; border-right-color: initial; border-bottom-color: initial; border-left-color: silver; border-image: initial; border-collapse: collapse; padding: 3px;\"><p style=\"margin: 10px auto;\">Tomcat 7</p></td><td align=\"left\" valign=\"top\" width=\"191\" style=\"border-width: 1px 0.5pt 0.5pt 1px; border-style: solid; border-top-color: silver; border-right-color: initial; border-bottom-color: initial; border-left-color: silver; border-image: initial; border-collapse: collapse; padding: 3px;\"><p style=\"margin: 10px auto;\">3.0</p></td><td align=\"left\" valign=\"top\" width=\"155\" style=\"border-width: 1px 1px 0.5pt; border-style: solid; border-top-color: silver; border-right-color: silver; border-bottom-color: initial; border-left-color: silver; border-image: initial; border-collapse: collapse; padding: 3px;\"><p style=\"margin: 10px auto;\">Java 6+</p></td></tr><tr><td align=\"left\" valign=\"top\" width=\"139\" style=\"border-width: 1px 0.5pt 0.5pt 1px; border-style: solid; border-top-color: silver; border-right-color: initial; border-bottom-color: initial; border-left-color: silver; border-image: initial; border-collapse: collapse; padding: 3px;\"><p style=\"margin: 10px auto;\">Jetty 9.3</p></td><td align=\"left\" valign=\"top\" width=\"191\" style=\"border-width: 1px 0.5pt 0.5pt 1px; border-style: solid; border-top-color: silver; border-right-color: initial; border-bottom-color: initial; border-left-color: silver; border-image: initial; border-collapse: collapse; padding: 3px;\"><p style=\"margin: 10px auto;\">3.1</p></td><td align=\"left\" valign=\"top\" width=\"155\" style=\"border-width: 1px 1px 0.5pt; border-style: solid; border-top-color: silver; border-right-color: silver; border-bottom-color: initial; border-left-color: silver; border-image: initial; border-collapse: collapse; padding: 3px;\"><p style=\"margin: 10px auto;\">Java 8+</p></td></tr><tr><td align=\"left\" valign=\"top\" width=\"139\" style=\"border-width: 1px 0.5pt 0.5pt 1px; border-style: solid; border-top-color: silver; border-right-color: initial; border-bottom-color: initial; border-left-color: silver; border-image: initial; border-collapse: collapse; padding: 3px;\"><p style=\"margin: 10px auto;\">Jetty 9.2</p></td><td align=\"left\" valign=\"top\" width=\"191\" style=\"border-width: 1px 0.5pt 0.5pt 1px; border-style: solid; border-top-color: silver; border-right-color: initial; border-bottom-color: initial; border-left-color: silver; border-image: initial; border-collapse: collapse; padding: 3px;\"><p style=\"margin: 10px auto;\">3.1</p></td><td align=\"left\" valign=\"top\" width=\"155\" style=\"border-width: 1px 1px 0.5pt; border-style: solid; border-top-color: silver; border-right-color: silver; border-bottom-color: initial; border-left-color: silver; border-image: initial; border-collapse: collapse; padding: 3px;\"><p style=\"margin: 10px auto;\">Java 7+</p></td></tr><tr><td align=\"left\" valign=\"top\" width=\"139\" style=\"border-width: 1px 0.5pt 0.5pt 1px; border-style: solid; border-top-color: silver; border-right-color: initial; border-bottom-color: initial; border-left-color: silver; border-image: initial; border-collapse: collapse; padding: 3px;\"><p style=\"margin: 10px auto;\">Jetty 8</p></td><td align=\"left\" valign=\"top\" width=\"191\" style=\"border-width: 1px 0.5pt 0.5pt 1px; border-style: solid; border-top-color: silver; border-right-color: initial; border-bottom-color: initial; border-left-color: silver; border-image: initial; border-collapse: collapse; padding: 3px;\"><p style=\"margin: 10px auto;\">3.0</p></td><td align=\"left\" valign=\"top\" width=\"155\" style=\"border-width: 1px 1px 0.5pt; border-style: solid; border-top-color: silver; border-right-color: silver; border-bottom-color: initial; border-left-color: silver; border-image: initial; border-collapse: collapse; padding: 3px;\"><p style=\"margin: 10px auto;\">Java 6+</p></td></tr><tr><td align=\"left\" valign=\"top\" width=\"139\" style=\"border-width: 1px 0.5pt 1px 1px; border-style: solid; border-top-color: silver; border-right-color: initial; border-bottom-color: silver; border-left-color: silver; border-image: initial; border-collapse: collapse; padding: 3px;\"><p style=\"margin: 10px auto;\">Undertow 1.3</p></td><td align=\"left\" valign=\"top\" width=\"191\" style=\"border-width: 1px 0.5pt 1px 1px; border-style: solid; border-top-color: silver; border-right-color: initial; border-bottom-color: silver; border-left-color: silver; border-image: initial; border-collapse: collapse; padding: 3px;\"><p style=\"margin: 10px auto;\">3.1</p></td><td align=\"left\" valign=\"top\" width=\"155\" style=\"border: 1px solid silver; border-collapse: collapse; padding: 3px;\"><p style=\"margin: 10px auto;\">Java 7+</p></td></tr></tbody></table><div>&nbsp;</div><div>此外，你仍然可以部署Spring Boot项目到任何兼容Servlet3.0+的容器。</div></blockquote><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\"><span style=\"font-size: 18pt;\"><a name=\"c2\"></a>二、使用Spring Boot。</span></div><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\">&nbsp;&nbsp;&nbsp; 你可以像使用标准的Java库文件一样使用Spring Boot。简单的将需要的&nbsp;<em>spring-boot-*.jar</em>&nbsp;添加到classpath即可。</div><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\">&nbsp;&nbsp;&nbsp; Spring Boot不要求任何特殊的工具集成，所以可以使用任何IDE，甚至文本编辑器。</div><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\">&nbsp;</div><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\">&nbsp;&nbsp;&nbsp; 只是，仍然建议使用build工具：Maven 或 Gradle。</div><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\">&nbsp;</div><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\">&nbsp;&nbsp;&nbsp; Spring Boot依赖 使用&nbsp;<code class=\"literal\">org.springframework.boot</code>&nbsp;<code class=\"literal\">groupId</code><span class=\"Apple-converted-space\">&nbsp;</span>。</div><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\">&nbsp;&nbsp;&nbsp; 通常，让你的Maven POM文件继承 spring-boot-starter-parent，并声明一个或多个 Starter POMs依赖即可。Spring Boot也提供了一个可选的 Maven Plugin来创建可执行的jars。&nbsp;&nbsp; 如下：</div><div class=\"cnblogs_code\" style=\"background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: &quot;Courier New&quot; !important; font-size: 12px !important;\"><div class=\"cnblogs_code_toolbar\" style=\"margin-top: 5px;\"><span class=\"cnblogs_code_copy\" style=\"padding-right: 5px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"color: rgb(0, 102, 170); background-color: rgb(245, 245, 245) !important; border: none !important;\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"max-width: 900px; border-width: initial !important; border-style: none !important;\"></a></span></div><pre style=\"margin-bottom: 0px; white-space: pre-wrap; font-family: &quot;Courier New&quot; !important; font-size: 12px !important;\"><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;?</span><span style=\"color: rgb(255, 0, 255); line-height: 1.5 !important;\">xml version=\"1.0\" encoding=\"UTF-8\"</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">?&gt;</span>\n<span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">project </span><span style=\"color: rgb(255, 0, 0); line-height: 1.5 !important;\">xmlns</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">=\"http://maven.apache.org/POM/4.0.0\"</span><span style=\"color: rgb(255, 0, 0); line-height: 1.5 !important;\"> xmlns:xsi</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">=\"http://www.w3.org/2001/XMLSchema-instance\"</span><span style=\"color: rgb(255, 0, 0); line-height: 1.5 !important;\">\n    xsi:schemaLocation</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n    <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">modelVersion</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>4.0.0<span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">modelVersion</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n\n    <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">groupId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>com.example<span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">groupId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n    <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">artifactId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>myproject<span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">artifactId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n    <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">version</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>0.0.1-SNAPSHOT<span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">version</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n\n    <span style=\"color: rgb(0, 128, 0); line-height: 1.5 !important;\">&lt;!--</span><span style=\"color: rgb(0, 128, 0); line-height: 1.5 !important;\"> Inherit defaults from Spring Boot </span><span style=\"color: rgb(0, 128, 0); line-height: 1.5 !important;\">--&gt;</span>\n    <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">parent</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n        <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">groupId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>org.springframework.boot<span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">groupId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n        <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">artifactId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>spring-boot-starter-parent<span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">artifactId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n        <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">version</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>1.4.0.RELEASE<span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">version</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n    <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">parent</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n\n    <span style=\"color: rgb(0, 128, 0); line-height: 1.5 !important;\">&lt;!--</span><span style=\"color: rgb(0, 128, 0); line-height: 1.5 !important;\"> Add typical dependencies for a web application </span><span style=\"color: rgb(0, 128, 0); line-height: 1.5 !important;\">--&gt;</span>\n    <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">dependencies</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n        <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">dependency</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n            <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">groupId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>org.springframework.boot<span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">groupId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n            <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">artifactId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>spring-boot-starter-web<span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">artifactId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n        <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">dependency</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n    <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">dependencies</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n\n    <span style=\"color: rgb(0, 128, 0); line-height: 1.5 !important;\">&lt;!--</span><span style=\"color: rgb(0, 128, 0); line-height: 1.5 !important;\"> Package as an executable jar </span><span style=\"color: rgb(0, 128, 0); line-height: 1.5 !important;\">--&gt;</span>\n    <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">build</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n        <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">plugins</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n            <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">plugin</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n                <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">groupId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>org.springframework.boot<span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">groupId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n                <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">artifactId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>spring-boot-maven-plugin<span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">artifactId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n            <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">plugin</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n        <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">plugins</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n    <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">build</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n\n<span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">project</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span></pre><div class=\"cnblogs_code_toolbar\" style=\"margin-top: 5px;\"><span class=\"cnblogs_code_copy\" style=\"padding-right: 5px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"color: rgb(0, 102, 170); background-color: rgb(245, 245, 245) !important; border: none !important;\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"max-width: 900px; border-width: initial !important; border-style: none !important;\"></a></span></div></div><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\">&nbsp;</div><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\">&nbsp;&nbsp;&nbsp; 需要注意的是， spring-boot-starter-parent 是一个非常好的方法，但并不适用于所有情况。有时你需要继承其他的POM，或者你不喜欢默认的设置。-- 办法见后面。</div><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\">&nbsp;</div><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\"><span style=\"font-size: 18pt;\"><a name=\"c3\"></a>三、安装Spring Boot CLI。</span></div><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\">&nbsp;&nbsp;&nbsp; 这是一个命令行工具，可以执行Groove脚本。是执行一个Spring Boot的最快途径。</div><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\">&nbsp;&nbsp;&nbsp; -- 好吧，Linux下无敌，Win下还是休息吧。</div><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\">&nbsp;</div><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\"><span style=\"font-size: 18pt;\"><a name=\"c4\"></a>四、开发一个简单的Spring Boot应用--使用最原始的方式。</span></div><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\">&nbsp;&nbsp;&nbsp; 务必注意：前提是maven + jdk。</div><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\">&nbsp;&nbsp;&nbsp;&nbsp;<a name=\"c4-1\"></a>1、创建一个文件夹。SpringBootSample01</div><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\">&nbsp;&nbsp;&nbsp;&nbsp;<a name=\"c4-2\"></a>2、新建一个pom.xml文件。内容如下：<br><div class=\"cnblogs_code\" style=\"background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: &quot;Courier New&quot; !important; font-size: 12px !important;\"><div class=\"cnblogs_code_toolbar\" style=\"margin-top: 5px;\"><span class=\"cnblogs_code_copy\" style=\"padding-right: 5px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"color: rgb(0, 102, 170); background-color: rgb(245, 245, 245) !important; border: none !important;\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"max-width: 900px; border-width: initial !important; border-style: none !important;\"></a></span></div><pre style=\"margin-bottom: 0px; white-space: pre-wrap; font-family: &quot;Courier New&quot; !important; font-size: 12px !important;\"><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;?</span><span style=\"color: rgb(255, 0, 255); line-height: 1.5 !important;\">xml version=\"1.0\" encoding=\"UTF-8\"</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">?&gt;</span>\n<span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">project </span><span style=\"color: rgb(255, 0, 0); line-height: 1.5 !important;\">xmlns</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">=\"http://maven.apache.org/POM/4.0.0\"</span><span style=\"color: rgb(255, 0, 0); line-height: 1.5 !important;\"> xmlns:xsi</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">=\"http://www.w3.org/2001/XMLSchema-instance\"</span><span style=\"color: rgb(255, 0, 0); line-height: 1.5 !important;\">\n    xsi:schemaLocation</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n    <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">modelVersion</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>4.0.0<span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">modelVersion</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n    <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">groupId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>com.example<span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">groupId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n    <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">artifactId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>myproject<span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">artifactId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n    <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">version</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>0.0.1-SNAPSHOT<span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">version</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n    <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">parent</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n        <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">groupId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>org.springframework.boot<span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">groupId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n        <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">artifactId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>spring-boot-starter-parent<span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">artifactId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n        <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">version</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>1.4.0.RELEASE<span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">version</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n    <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">parent</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n    <span style=\"color: rgb(0, 128, 0); line-height: 1.5 !important;\">&lt;!--</span><span style=\"color: rgb(0, 128, 0); line-height: 1.5 !important;\"> Additional lines to be added here... </span><span style=\"color: rgb(0, 128, 0); line-height: 1.5 !important;\">--&gt;</span>\n<span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">project</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span></pre><div class=\"cnblogs_code_toolbar\" style=\"margin-top: 5px;\"><br></div></div></div><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\">&nbsp;&nbsp;&nbsp;&nbsp;<a name=\"c4-3\"></a>3、上面没有添加任何依赖，但仍然可以build。命令行：mvn package。注意，是当前路径下 //SpringBootSample01/ 。</div><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 当然，你也可以使用IDE，不过使用文本编辑器会让我们对它更理解。</div><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src=\"http://images2015.cnblogs.com/blog/870358/201608/870358-20160823140753401-1038020327.png\" alt=\"\" width=\"623\" height=\"482\" style=\"max-width: 900px;\"></div><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\">&nbsp;&nbsp;&nbsp;&nbsp;<a name=\"c4-4\"></a>4、现在需要添加依赖 -- 其实就是把依赖的jar添加到buildpath。</div><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 由于我们已经继承了 spring-boot-starter-parent ，而 spring-boot-starter-parent 又提供了 dependency-management ，所以我们可以忽略被选中依赖的版本。</div><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在添加依赖之前，我们先看一下现在已有什么：mvn dependency:tree。该命令会打印一个当前项目的依赖树。</div><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div><div style=\"font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13.3333px;\"><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 结果表明，当前没有任何依赖。&nbsp;</div><div>&nbsp;&nbsp;<img src=\"http://images2015.cnblogs.com/blog/870358/201608/870358-20160823140837636-431733277.png\" alt=\"\" width=\"655\" height=\"310\" style=\"max-width: 900px;\"></div><div class=\"tag\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OK，现在我们添加一个Starter 模块。<br><div class=\"cnblogs_code\" style=\"background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); padding: 5px; overflow: auto; margin: 5px 0px; font-family: &quot;Courier New&quot; !important; font-size: 12px !important;\"><div class=\"cnblogs_code_toolbar\" style=\"margin-top: 5px;\"><span class=\"cnblogs_code_copy\" style=\"padding-right: 5px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"color: rgb(0, 102, 170); background-color: rgb(245, 245, 245) !important; border: none !important;\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"max-width: 900px; border-width: initial !important; border-style: none !important;\"></a></span></div><pre style=\"margin-bottom: 0px; white-space: pre-wrap; font-family: &quot;Courier New&quot; !important; font-size: 12px !important;\"><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">dependencies</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n    <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">dependency</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n        <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">groupId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>org.springframework.boot<span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">groupId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n        <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">artifactId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>spring-boot-starter-web<span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">artifactId</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n    <span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">dependency</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span>\n<span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&lt;/</span><span style=\"color: rgb(128, 0, 0); line-height: 1.5 !important;\">dependencies</span><span style=\"color: rgb(0, 0, 255); line-height: 1.5 !important;\">&gt;</span></pre><div class=\"cnblogs_code_toolbar\" style=\"margin-top: 5px;\"><br></div></div></div></div>', 'spring boot 入门教程', '6', null, '\0', '2017-10-17 10:56:05', '0');

-- ----------------------------
-- Table structure for articlecomment
-- ----------------------------
DROP TABLE IF EXISTS `articlecomment`;
CREATE TABLE `articlecomment` (
  `ArtComtID` int(11) NOT NULL AUTO_INCREMENT,
  `ArticleID` int(11) NOT NULL,
  `MsgID` int(11) NOT NULL,
  PRIMARY KEY (`ArtComtID`),
  KEY `ArticleID` (`ArticleID`),
  KEY `MsgID` (`MsgID`),
  CONSTRAINT `articlecomment_ibfk_1` FOREIGN KEY (`ArticleID`) REFERENCES `article` (`ArticleID`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `articlecomment_ibfk_2` FOREIGN KEY (`MsgID`) REFERENCES `message` (`MsgID`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Records of articlecomment
-- ----------------------------
INSERT INTO `articlecomment` VALUES ('17', '24', '19');
INSERT INTO `articlecomment` VALUES ('19', '21', '21');
INSERT INTO `articlecomment` VALUES ('20', '27', '23');
INSERT INTO `articlecomment` VALUES ('21', '27', '24');

-- ----------------------------
-- Table structure for arttheme
-- ----------------------------
DROP TABLE IF EXISTS `arttheme`;
CREATE TABLE `arttheme` (
  `ThemeID` int(11) NOT NULL AUTO_INCREMENT,
  `TName` varchar(20) CHARACTER SET utf8 NOT NULL,
  `CreateTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `CreateUID` int(11) NOT NULL,
  PRIMARY KEY (`ThemeID`),
  UNIQUE KEY `TName` (`TName`),
  KEY `CreateUID` (`CreateUID`),
  CONSTRAINT `arttheme_ibfk_1` FOREIGN KEY (`CreateUID`) REFERENCES `webusers` (`UID`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Records of arttheme
-- ----------------------------
INSERT INTO `arttheme` VALUES ('0', '全部教程', '2017-05-02 16:49:28', '1');
INSERT INTO `arttheme` VALUES ('1', 'Spring 基础', '2017-05-02 22:15:07', '6');
INSERT INTO `arttheme` VALUES ('2', 'Spring MVC', '2017-05-06 09:25:11', '1');
INSERT INTO `arttheme` VALUES ('3', 'Spring 持久化', '2017-05-02 22:15:10', '6');
INSERT INTO `arttheme` VALUES ('4', 'Spring 集成', '2017-05-12 23:12:39', '1');
INSERT INTO `arttheme` VALUES ('6', 'Spring Boot', '2017-10-17 10:46:07', '6');

-- ----------------------------
-- Table structure for message
-- ----------------------------
DROP TABLE IF EXISTS `message`;
CREATE TABLE `message` (
  `MsgID` int(11) NOT NULL AUTO_INCREMENT,
  `Sender` int(11) NOT NULL,
  `Recevier` int(11) NOT NULL,
  `MsgContent` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `MsgTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Msgtype` smallint(6) NOT NULL DEFAULT '1' COMMENT '消息类型：\r\n[0]系统通知消息；\r\n[1]教程留言消息；\r\n[2]笔记评论消息；\r\n[3]系统消息；',
  PRIMARY KEY (`MsgID`),
  KEY `Sender` (`Sender`),
  KEY `Recevier` (`Recevier`),
  CONSTRAINT `message_ibfk_1` FOREIGN KEY (`Sender`) REFERENCES `webusers` (`UID`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `message_ibfk_2` FOREIGN KEY (`Recevier`) REFERENCES `webusers` (`UID`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Records of message
-- ----------------------------
INSERT INTO `message` VALUES ('2', '4', '3', '学到了很多', '2017-04-27 21:43:12', '1');
INSERT INTO `message` VALUES ('4', '2', '2', '学到了很多', '2017-04-28 18:04:32', '1');
INSERT INTO `message` VALUES ('5', '2', '2', '学到了很多', '2017-04-28 18:07:41', '1');
INSERT INTO `message` VALUES ('6', '2', '3', '学到了很多', '2017-04-28 18:17:58', '2');
INSERT INTO `message` VALUES ('7', '5', '3', '学到了很多', '2017-04-28 18:21:33', '2');
INSERT INTO `message` VALUES ('9', '2', '6', '教程很详细，赞~\\(≧▽≦)/~', '2017-05-01 22:52:37', '1');
INSERT INTO `message` VALUES ('10', '2', '6', '教程很详细，赞~\\(≧▽≦)/~', '2017-05-01 22:53:40', '1');
INSERT INTO `message` VALUES ('11', '2', '6', '一楼 O(∩_∩)O~', '2017-05-02 17:34:14', '1');
INSERT INTO `message` VALUES ('12', '4', '6', '讲的很详细啊', '2017-05-02 17:41:04', '1');
INSERT INTO `message` VALUES ('13', '3', '6', '简单明了', '2017-05-02 17:41:42', '1');
INSERT INTO `message` VALUES ('14', '6', '6', '讲解很详细！', '2017-05-05 11:12:00', '1');
INSERT INTO `message` VALUES ('15', '2', '6', '哈哈', '2017-05-06 08:55:23', '1');
INSERT INTO `message` VALUES ('16', '6', '6', '好的', '2017-05-06 09:02:18', '1');
INSERT INTO `message` VALUES ('17', '6', '6', '232234234', '2017-05-07 19:04:12', '1');
INSERT INTO `message` VALUES ('18', '8', '6', '有趣\n', '2017-05-12 20:31:42', '1');
INSERT INTO `message` VALUES ('19', '9', '6', '讲的很好', '2017-05-12 22:40:55', '1');
INSERT INTO `message` VALUES ('20', '6', '6', '23333', '2017-05-12 22:45:41', '1');
INSERT INTO `message` VALUES ('21', '10', '6', '讲的很好，学习了', '2017-05-12 23:10:43', '1');
INSERT INTO `message` VALUES ('22', '6', '6', 'heheh', '2017-05-12 23:15:35', '1');
INSERT INTO `message` VALUES ('23', '6', '6', 'ssss', '2017-05-13 15:59:26', '1');
INSERT INTO `message` VALUES ('24', '6', '6', '55154', '2017-06-03 10:27:09', '1');

-- ----------------------------
-- Table structure for note
-- ----------------------------
DROP TABLE IF EXISTS `note`;
CREATE TABLE `note` (
  `NoteID` int(11) NOT NULL AUTO_INCREMENT,
  `UerID` int(11) NOT NULL,
  `CreateTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `NTitle` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `NContent` text CHARACTER SET utf8,
  PRIMARY KEY (`NoteID`),
  KEY `UerID` (`UerID`),
  CONSTRAINT `note_ibfk_1` FOREIGN KEY (`UerID`) REFERENCES `webusers` (`UID`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Records of note
-- ----------------------------
INSERT INTO `note` VALUES ('1', '2', '2017-04-28 18:20:04', '第一个笔记', 'dsddawqewq');
INSERT INTO `note` VALUES ('2', '3', '2017-04-28 18:21:13', 'guytgui', 'hahahha');
INSERT INTO `note` VALUES ('3', '2', '2017-04-28 19:28:42', 'noteTitle', 'dsadasdasd');
INSERT INTO `note` VALUES ('5', '2', '2017-04-28 22:41:49', '卡拉话费卡刷', '我是卡了多久啊开了房金坷垃就开了圣诞节疯狂老师积分克里斯傅雷家书克劳福德就上课了东方健康老师放假离开家快乐圣诞节付款了涉及到快乐');

-- ----------------------------
-- Table structure for notecomment
-- ----------------------------
DROP TABLE IF EXISTS `notecomment`;
CREATE TABLE `notecomment` (
  `NoteComtID` int(11) NOT NULL AUTO_INCREMENT,
  `NoteID` int(11) NOT NULL,
  `MsgID` int(11) NOT NULL,
  PRIMARY KEY (`NoteComtID`),
  KEY `NoteID` (`NoteID`),
  KEY `MsgID` (`MsgID`),
  CONSTRAINT `notecomment_ibfk_1` FOREIGN KEY (`NoteID`) REFERENCES `note` (`NoteID`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `notecomment_ibfk_2` FOREIGN KEY (`MsgID`) REFERENCES `message` (`MsgID`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Records of notecomment
-- ----------------------------
INSERT INTO `notecomment` VALUES ('2', '2', '7');

-- ----------------------------
-- Table structure for webusers
-- ----------------------------
DROP TABLE IF EXISTS `webusers`;
CREATE TABLE `webusers` (
  `UID` int(11) NOT NULL AUTO_INCREMENT,
  `UCount` varchar(15) CHARACTER SET utf8 NOT NULL,
  `UPswd` varchar(20) CHARACTER SET utf8 NOT NULL DEFAULT '123456',
  `UNickName` varchar(30) CHARACTER SET utf8 DEFAULT '新用户',
  `USex` bit(1) NOT NULL DEFAULT b'1',
  `UImg` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `UEmail` varchar(255) CHARACTER SET utf8 NOT NULL,
  `USigin` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `ULevel` int(11) DEFAULT '1',
  `UType` smallint(6) NOT NULL DEFAULT '1' COMMENT '用户类型UType用于标识用户的权限等级，其中权限定取值义如下（不含中括号）：\r\n[0] 系统管理员，拥有全部权限；\r\n[1]普通注册用户，只拥有个人管理和学习笔记管理权限；\r\n[2] 教程发布人，拥有教程全部的管理权限；',
  `UIsOnline` bit(1) NOT NULL DEFAULT b'0',
  `URegTime` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `ULastLoginTime` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`UID`),
  UNIQUE KEY `UCount` (`UCount`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Records of webusers
-- ----------------------------
INSERT INTO `webusers` VALUES ('1', 'SYSTEM', '1320074071', 'SYSTEM', '', '/HelloSpring/upload/userImg/14796-106.jpg', '425868130@qq.com', '哈哈哈', '1', '0', '', '2017-04-25 12:38:25', '2017-10-17 10:45:06');
INSERT INTO `webusers` VALUES ('2', '14201125', '123456', '徐嘉伟', '', '/HelloSpring/upload/userImg/4271-106.jpg', '425868130@qq.com', '好好学习,天天向上', '1', '1', '\0', '2017-04-05 12:09:11', '2017-10-17 10:43:50');
INSERT INTO `webusers` VALUES ('3', '14201124', '123456', '谢伟', '', null, '123456@qq.com', null, '1', '1', '', '2017-04-25 12:38:25', '2017-05-02 17:41:35');
INSERT INTO `webusers` VALUES ('4', '14201122', '123456', '王睿', '', null, '12345@qq.com', null, '1', '1', '\0', '2017-04-25 12:38:25', '2017-05-12 22:36:14');
INSERT INTO `webusers` VALUES ('5', '14201123', '123456', '吴宇楠', '', null, '123456@qq.com', null, '1', '1', '', '2017-04-25 12:38:25', '2017-04-25 12:38:25');
INSERT INTO `webusers` VALUES ('6', 'NchuWeb', '123456', 'NCHU', '', '/HelloSpring/upload/userImg/timg.jpg', '123456@nchu.com', '日新自强，知行合一', '1', '2', '\0', '2017-04-25 12:38:25', '2017-06-03 10:40:41');
INSERT INTO `webusers` VALUES ('7', 'EVERYONE', '123456', '新用户', '', null, '1234@hellospring.com', null, '1', '0', '\0', '2017-04-28 17:37:14', null);
INSERT INTO `webusers` VALUES ('8', '14201130', '1', '周小军', '', '/HelloSpring/upload/userImg/9302-106.jpg', '1', '我是你爹', '1', '1', '\0', '2017-05-12 20:29:29', '2017-05-12 20:31:25');
INSERT INTO `webusers` VALUES ('9', '14201132', '123456', '徐嘉伟', '\0', '/HelloSpring/upload/userImg/43985-106.jpg', '1235@qq.com', '开心快乐', '1', '1', '\0', '2017-05-12 22:40:16', '2017-05-12 22:40:25');
INSERT INTO `webusers` VALUES ('10', '14201133', '123456', '徐嘉伟', '\0', '/HelloSpring/upload/userImg/43985-106.jpg', '12345@qq.com', '好好学习', '1', '1', '\0', '2017-05-12 23:10:02', '2017-05-12 23:10:09');

-- ----------------------------
-- View structure for v$articlecmmts
-- ----------------------------
DROP VIEW IF EXISTS `v$articlecmmts`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `v$articlecmmts` AS select `articlecomment`.`ArtComtID` AS `ArtComtID`,`articlecomment`.`ArticleID` AS `ArticleID`,`message`.`Sender` AS `Sender`,`message`.`MsgContent` AS `MsgContent`,`message`.`MsgTime` AS `MsgTime`,`message`.`MsgID` AS `MsgID`,`message`.`Recevier` AS `Recevier` from (`message` join `articlecomment` on((`articlecomment`.`MsgID` = `message`.`MsgID`))) ;

-- ----------------------------
-- View structure for v$articlewiththeme
-- ----------------------------
DROP VIEW IF EXISTS `v$articlewiththeme`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `v$articlewiththeme` AS select `article`.`ArticleID` AS `ArticleID`,`article`.`AuthorID` AS `AuthorID`,`article`.`ArtTitle` AS `ArtTitle`,`article`.`Content` AS `Content`,`article`.`Summary` AS `Summary`,`article`.`ThemeID` AS `ThemeID`,`arttheme`.`TName` AS `TName`,`article`.`SavePath` AS `SavePath`,`article`.`HasAttachment` AS `HasAttachment`,`article`.`UpTime` AS `UpTime`,`article`.`PageView` AS `PageView` from (`article` join `arttheme` on((`article`.`ThemeID` = `arttheme`.`ThemeID`))) order by `article`.`UpTime` desc ;

-- ----------------------------
-- View structure for v$notecmmts
-- ----------------------------
DROP VIEW IF EXISTS `v$notecmmts`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `v$notecmmts` AS select `notecomment`.`NoteComtID` AS `NoteComtID`,`notecomment`.`NoteID` AS `NoteID`,`message`.`Sender` AS `Sender`,`message`.`Recevier` AS `Recevier`,`message`.`MsgContent` AS `MsgContent`,`message`.`MsgTime` AS `MsgTime` from (`notecomment` join `message` on((`notecomment`.`MsgID` = `message`.`MsgID`))) order by `message`.`MsgTime` desc ;

-- ----------------------------
-- View structure for v$systemnotif
-- ----------------------------
DROP VIEW IF EXISTS `v$systemnotif`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `v$systemnotif` AS select `message`.`MsgID` AS `MsgID`,`message`.`Sender` AS `Sender`,`message`.`Recevier` AS `Recevier`,`message`.`MsgContent` AS `MsgContent`,`message`.`MsgTime` AS `MsgTime`,`message`.`Msgtype` AS `Msgtype` from `message` where (`message`.`Msgtype` = 0) ;

-- ----------------------------
-- Procedure structure for P$ArticleCmmts
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$ArticleCmmts`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$ArticleCmmts`(IN `IN_ArticleID` int)
BEGIN
#教程留言列表
SELECT * FROM v$articlecmmts WHERE ArticleID = IN_ArticleID;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$ArticleViewAdd
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$ArticleViewAdd`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$ArticleViewAdd`(IN `IN_ArticleID` int)
BEGIN
#教程浏览量加一
UPDATE article SET article.PageView = article.PageView + 1
WHERE article.ArticleID = IN_ArticleID;
SELECT article.ArticleID,article.PageView
FROM article
WHERE article.ArticleID = IN_ArticleID;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$ArtListByTheme
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$ArtListByTheme`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$ArtListByTheme`(IN `IN_ThemeID` int,IN `IN_Page` int,IN `IN_PageSize` int)
BEGIN
#按教程主题的教程列表分页查询
DECLARE page INT DEFAULT 0;
DECLARE pageSize INT DEFAULT 10;
#设置分页大小
SET pageSize = IN_PageSize;
#设置页码
SET page = (IN_Page - 1) * pageSize;
SELECT ArticleID,ArtTitle,Summary,ThemeID,TName,UpTime,PageView
FROM V$articleWithTheme
WHERE ThemeID = IN_ThemeID
LIMIT page,pageSize;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$ArtTimeOrderPage
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$ArtTimeOrderPage`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$ArtTimeOrderPage`(IN `IN_Page` int,IN `IN_PageSize` int)
BEGIN
#时间排序下的教程分页查询
DECLARE page INT DEFAULT 0;
DECLARE pageSize INT DEFAULT 10;
#设置分页大小
SET pageSize = IN_PageSize;
#设置页码
SET page = (IN_Page - 1) * pageSize;
SELECT * FROM v$articleWithTheme ORDER BY UpTime DESC LIMIT page,pageSize;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$ChangeUserType
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$ChangeUserType`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$ChangeUserType`(IN `IN_UID` int,IN `IN_UTYPE` int)
BEGIN
IF IN_UTYPE = 0 OR IN_UTYPE = 1 OR IN_UTYPE = 2 THEN
UPDATE webusers SET UType = IN_UTYPE
WHERE webusers.UID = IN_UID;
end IF;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$CreateArtCmmt
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$CreateArtCmmt`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$CreateArtCmmt`(IN `IN_SenderID` int,IN `IN_ReceiverID` int,IN `IN_ArticleID` int,IN `IN_MsgContent` varchar(255) charset utf8)
BEGIN
#创建文章留言
DECLARE msgID INT;
CALL P$CreateMsg(IN_SenderID,IN_ReceiverID,IN_MsgContent,1,msgID);
INSERT INTO articlecomment VALUES(null,IN_ArticleID,msgID);
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$CreateArticle
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$CreateArticle`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$CreateArticle`(IN `IN_UID` int,IN `IN_ThemeID` int,IN `IN_ArtTitle` varchar(255) charset utf8,IN `IN_Content` text charset utf8,IN IN_Summary varchar(255) charset utf8)
BEGIN
#创建教程
INSERT INTO article VALUES(NULL,IN_UID,IN_ArtTitle,IN_Content,IN_Summary,
IN_ThemeID,NULL,0,NOW(),0);
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$CreateMsg
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$CreateMsg`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$CreateMsg`(IN `IN_SenderID` int,IN `IN_ReceiverID` int,IN `IN_MsgContent` varchar(255) charset utf8,IN `IN_MsgType` smallint,OUT `OUT_MsgID` INT)
BEGIN
#创建一条消息
#消息类型：
#[0]系统通知消息；
#[1]教程留言消息；
#[2]笔记评论消息；
#[3]系统消息;
INSERT INTO message(message.Sender,message.Recevier,message.MsgContent,message.Msgtype)
VALUES (IN_SenderID,IN_ReceiverID,IN_MsgContent,IN_MsgType);
SELECT @@IDENTITY INTO OUT_MsgID;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$CreateNote
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$CreateNote`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$CreateNote`(IN `IN_UID` int,IN `IN_NoteTitle` varchar(255) charset utf8,IN `IN_NoteContent` text charset utf8)
BEGIN
#新建笔记
INSERT INTO note VALUES(NULL,IN_UID,NULL,IN_NoteTitle,IN_NoteContent);
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$CreateNoteCmmt
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$CreateNoteCmmt`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$CreateNoteCmmt`(IN `IN_SenderID` int,IN `IN_ReceiverID` int,IN `IN_NoteID` int,IN `IN_MsgContent` varchar(255) charset utf8)
BEGIN
#创建一条笔记评论
DECLARE msgID INT;
CALL P$CreateMsg(IN_SenderID,IN_ReceiverID,IN_MsgContent,2,msgID);
INSERT INTO notecomment VALUES(null,IN_NoteID,msgID);
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$CreateTheme
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$CreateTheme`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$CreateTheme`(IN `IN_CreateUID` int,IN `IN_ThemeName` varchar(50) charset utf8)
BEGIN
#创建教程主题
INSERT INTO arttheme VALUES(NULL,IN_ThemeName,NOW(),IN_CreateUID);
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$DeleteArticle
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$DeleteArticle`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$DeleteArticle`(IN `IN_ArticleID` int)
BEGIN
#删除教程
DELETE FROM article WHERE article.ArticleID = IN_ArticleID;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$DeleteMsg
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$DeleteMsg`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$DeleteMsg`(IN `IN_MsgID` int)
BEGIN
	#Routine body goes here...
DELETE FROM message WHERE message.MsgID = IN_MsgID;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$DeleteNote
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$DeleteNote`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$DeleteNote`(IN `IN_NoteID` int)
BEGIN
#删除指定ID的笔记
DELETE FROM note WHERE note.NoteID = IN_NoteID;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$DeleteTheme
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$DeleteTheme`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$DeleteTheme`(IN `IN_ThemeID` int)
BEGIN
#删除教程主题
DELETE FROM arttheme
WHERE arttheme.ThemeID = IN_ThemeID AND arttheme.ThemeID != 0;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$EditArticle
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$EditArticle`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$EditArticle`(IN `IN_ArticleID` int,IN `IN_ThemeID` int,IN `IN_ArtTitle` varchar(255) charset utf8,IN IN_Summary varchar(255) charset utf8,IN `IN_ArtContent` text charset utf8)
BEGIN
#教程编辑
UPDATE article SET article.ThemeID = IN_ThemeID,
article.ArtTitle = IN_ArtTitle,
article.Content = IN_ArtContent,
article.Summary = IN_Summary
WHERE article.ArticleID = IN_ArticleID;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$EditNote
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$EditNote`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$EditNote`(IN `IN_NoteID` int,IN `IN_NoteTitle` varchar(255) charset utf8,IN `IN_NoteContent` longtext charset utf8)
BEGIN
UPDATE note SET NTitle = IN_NoteTitle,NContent = IN_NoteContent
WHERE NoteID = IN_NoteID;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$EditTheme
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$EditTheme`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$EditTheme`(IN `IN_ThemeID` int,IN `IN_ThemeName` varchar(50) charset utf8)
BEGIN
#修改教程主题
UPDATE arttheme SET arttheme.TName = IN_ThemeName
WHERE arttheme.ThemeID !=0 AND arttheme.ThemeID = IN_ThemeID;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$findNickbyUID
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$findNickbyUID`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$findNickbyUID`(IN `IN_UID` int)
BEGIN
	#Routine body goes here...
SELECT webusers.UNickName FROM webusers
WHERE webusers.UID = IN_UID;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$findUserByCount
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$findUserByCount`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$findUserByCount`(IN `IN_Ucount` varchar(15) charset utf8)
BEGIN
SELECT * FROM webusers
WHERE webusers.UCount = IN_Ucount;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$GetArticleByID
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$GetArticleByID`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$GetArticleByID`(IN `IN_ArticleID` int)
BEGIN
#通过教程ID获取指定的教程内容
SELECT * FROM v$articlewiththeme
WHERE ArticleID = IN_ArticleID;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$loginCheck
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$loginCheck`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$loginCheck`(IN `IN_Ucount` varchar(15) charset utf8,IN `IN_Upswd` varchar(20) charset utf8)
BEGIN
#用户登录,先检查用户,再修改用户在线状态
DECLARE passed INT DEFAULT 0;
SELECT COUNT(*) INTO passed
FROM webusers
WHERE webusers.UCount = IN_Ucount AND webusers.UPswd = IN_Upswd;
IF passed = 1 THEN
CALL P$userLogin(IN_Ucount);
END IF;
SELECT passed;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$NoteCmmts
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$NoteCmmts`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$NoteCmmts`(IN `IN_NoteID` int)
BEGIN
	#Routine body goes here...
SELECT * FROM v$notecmmts
WHERE NoteID = IN_NoteID;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$NoteListByPage
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$NoteListByPage`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$NoteListByPage`(IN `IN_UID` int,IN `IN_Page` int,IN `IN_PageSize` int)
BEGIN
#时间排序下的笔记分页查询
DECLARE page INT DEFAULT 0;
DECLARE pageSize INT DEFAULT 10;
#设置分页大小
SET pageSize = IN_PageSize;
#设置页码
SET page = (IN_Page - 1) * pageSize;
SELECT *
FROM note
WHERE note.UerID = IN_UID
ORDER BY note.CreateTime DESC
LIMIT page,pageSize;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$PageSumByTheme
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$PageSumByTheme`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$PageSumByTheme`(IN `IN_ThemeID` int,IN `IN_PageSize` int)
BEGIN
#获取按主题分类的教程列表总页数
DECLARE SumPage INT;
DECLARE Count INT;

SELECT COUNT(*) INTO Count
FROM v$articleWithTheme
WHERE ThemeID = IN_ThemeID;
#计算总页码
IF Count%IN_PageSize = 0 THEN
SET SumPage = Count/IN_PageSize;
ELSE
#FLOOR(x)函数可以除法取整,免去四舍五入
SET SumPage = FLOOR(Count/IN_PageSize) + 1;
END IF;
SELECT SumPage;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$PageSumOfArt
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$PageSumOfArt`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$PageSumOfArt`(IN `IN_PageSize` int)
BEGIN
#获取教程列表总页数
DECLARE SumPage INT;
DECLARE Count INT;
SELECT COUNT(*) INTO Count
FROM v$articleWithTheme;
IF Count%IN_PageSize = 0 THEN
SET SumPage = Count/IN_PageSize;
ELSE
#FLOOR(x)函数可以除法取整,免去四舍五入
SET SumPage = FLOOR(Count/IN_PageSize) + 1;
END IF;
SELECT SumPage;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$PageSumOfNote
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$PageSumOfNote`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$PageSumOfNote`(IN `IN_UID` int,IN `IN_PageSize` int)
BEGIN
#获取用户笔记的总页码数
DECLARE SumPage INT;
DECLARE Count INT;

SELECT COUNT(*) INTO Count
FROM note
WHERE note.UerID = IN_UID;
#计算总页码
IF Count%IN_PageSize = 0 THEN
SET SumPage = Count/IN_PageSize;
ELSE
#FLOOR(x)函数可以除法取整,免去四舍五入
SET SumPage = FLOOR(Count/IN_PageSize) + 1;
END IF;
SELECT SumPage;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$SimpleArtList
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$SimpleArtList`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$SimpleArtList`(IN `IN_Page` int,IN `IN_pageSize` int)
BEGIN
#简单教程列表
DECLARE page INT DEFAULT 0;
DECLARE pageSize INT DEFAULT 10;
#设置分页大小
SET pageSize = IN_PageSize;
#设置页码
SET page = (IN_Page - 1) * pageSize;
SELECT ArticleID,ArtTitle,Summary,ThemeID,TName,UpTime,PageView
FROM v$articleWithTheme ORDER BY UpTime DESC LIMIT page,pageSize;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$UpdatePswd
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$UpdatePswd`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$UpdatePswd`(IN `IN_Ucount` varchar(15) charset utf8,IN `IN_newPswd` varchar(20) charset utf8)
BEGIN
	#Routine body goes here...
UPDATE webusers SET webusers.UPswd = IN_newPswd
WHERE webusers.UCount = IN_Ucount;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$UpdateUserImg
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$UpdateUserImg`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$UpdateUserImg`(IN `IN_UCount` varchar(15) charset utf8,IN `IN_UImg` varchar(255) charset utf8)
BEGIN
UPDATE webusers SET webusers.UImg = IN_UImg
WHERE webusers.UCount = IN_UCount;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$UpdateUserInfo
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$UpdateUserInfo`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$UpdateUserInfo`(IN `IN_UCount` varchar(15) charset utf8,IN `IN_NewSex` bit,IN `IN_NewNick` varchar(30) charset utf8,IN `IN_NewSign` varchar(255) charset utf8,IN `IN_NewEmail` varchar(255) charset utf8)
BEGIN
	#用户信息修改
UPDATE webusers
SET webusers.UNickName = IN_NewNick,
webusers.USex = IN_NewSex,
webusers.USigin = IN_NewSign,
webusers.UEmail = IN_NewEmail
WHERE webusers.UCount = IN_UCount;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$userLogin
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$userLogin`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$userLogin`(IN `IN_Ucount` varchar(15) charset utf8)
BEGIN
#用户登录存储过程
UPDATE webusers SET webusers.UIsOnline = 1,webusers.ULastLoginTime = NOW()
WHERE webusers.UCount = IN_Ucount;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$userLogout
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$userLogout`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$userLogout`(IN `IN_Ucount` varchar(15) charset utf8)
BEGIN
	#Routine body goes here...
UPDATE webusers SET webusers.UIsOnline = 0
WHERE webusers.UCount = IN_Ucount;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$UserMsglistC
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$UserMsglistC`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$UserMsglistC`(IN `IN_UID` int)
BEGIN
	#Routine body goes here...
SELECT *FROM message
WHERE message.Recevier = IN_UID;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for P$userReg
-- ----------------------------
DROP PROCEDURE IF EXISTS `P$userReg`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `P$userReg`(IN `IN_Ucount` varchar(15) charset utf8,IN `IN_Pswd` varchar(20) charset utf8,IN `IN_Email` varchar(255) charset utf8)
BEGIN
#Routine body goes here...
INSERT INTO webusers(UCount,UPswd,UEmail) VALUES(IN_Ucount,IN_Pswd,IN_Email);
END
;;
DELIMITER ;
